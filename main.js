(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(15),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,'body {\n  padding: 0;\n  margin: 10px;\n  box-sizing: border-box;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  min-height: 98vh;\n  display: flex;\n  flex-direction: column;\n}\n\n#content {\n  display: flex;\n  flex-direction: row;\n  gap: 15px;\n}\n\nfooter {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n}\n\nfooter p {\n  text-align: left;\n  transform: rotate(0.75turn);\n  width: max-content;\n}\n\nbutton,\ninput[type="button"],\ninput[type="submit"],\nselect {\n  border: 1px black solid;\n  background-color: white;\n}\n\nselect {\n  width: 40px;\n  text-align: center;\n  border: 1px solid grey;\n}\n\nbutton:hover {\n  cursor: pointer;\n}\n\n.removeItem,\n.editItem,\n.removeProject,\n.expandall {\n  height: 25px;\n  width: 25px;\n  padding: 0;\n  font-size: 20px;\n}\n\n.removeProject,\n.sortProject,\n.expandall,\n.closeProject {\n  border: none;\n}\n\n.expandall,\n.closeProject {\n  font-size: 16px;\n}\n\n.closeProject {\n  padding: 0;\n  margin: 0;\n}\n\n.sortProject {\n  height: 25px;\n  padding: 0;\n  padding-right: 2px;\n}\n\n#addnewproject {\n  padding: 10px 20px;\n  font-size: 16px;\n}\n\n.addItem {\n  height: 25px;\n  width: 100%;\n  font-size: 20px;\n  padding: 0;\n}\n\n.projectDiv {\n  width: 300px;\n  flex-shrink: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  border: 1px grey solid;\n  padding: 3px 10px 10px 10px;\n  height: max-content;\n  box-shadow: 0 0 0 2px white, 0 0 0 3px lightgrey;\n}\n\n#info {\n  width: 250px;\n  flex-shrink: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 0px 10px 10px 10px;\n  height: max-content;\n}\n\n.projectDiv > div,\n.infoPriority > div,\n.infoDate > div {\n  padding: 0px 10px 10px 10px;\n}\n\n.closeprojectdiv {\n  padding: 0px !important;\n}\n\n.itemDiv {\n  border: 1px dotted lightgrey;\n  max-width: 100%;\n}\n\n.projectDiv h4 {\n  margin-bottom: 0px;\n}\n\n.statusSpan {\n  width: 10px;\n  height: 10px;\n  background-color: white;\n  border: solid 1px black;\n  padding: 0;\n  margin-left: 5px;\n}\n\n.statusSpan:hover {\n  cursor: pointer;\n}\n\n.statusSpanComplete {\n  width: 25px;\n  height: 25px;\n  border: none;\n  font-size: 18px;\n  margin-left: 5px;\n}\n\n.projectHeader {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  gap: 2px;\n  padding: 0px 0px 0px 3px !important;\n}\n\n.projectHeader > h2 {\n  margin-top: 0px;\n  margin-bottom: 0px;\n  flex-grow: 1;\n}\n\n.projectHeader > button {\n  flex-shrink: 0;\n}\n\n.formDiv {\n  padding-bottom: 0px !important;\n}\n\n.itemFooter {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\n.itemHeader {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\nlabel[for="checkList"]:after {\n  content: "Separate list items with \';\'";\n  font-size: 12px;\n}\n\nlabel[for="title"]:after {\n  content: " (*required)";\n  font-size: 12px;\n}\n\nul {\n  padding-left: 0;\n}\n\nul li {\n  list-style: none;\n}\n\n.taskNotComplete:before {\n  font-family: "Line Awesome Free";\n  content: "\\F04D";\n  color: black;\n  font-weight: 900;\n  padding-left: 15px;\n  padding-right: 10px;\n}\n\n.taskNotComplete:hover {\n  cursor: pointer;\n}\n\nli.taskComplete {\n  text-decoration: line-through;\n}\n\nli.taskComplete:before {\n  font-family: "Line Awesome Free";\n  content: "\\F14A";\n  color: black;\n  font-weight: 900;\n  padding-left: 15px;\n  padding-right: 10px;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.priority5 i {\n  border-radius: 25px;\n  background-color: #ffccbc;\n}\n\n.priority3 i,\n.priority4 i {\n  border-radius: 25px;\n  background-color: #fff9c4;\n}\n\n.priority1 i,\n.priority2 i {\n  border-radius: 25px;\n  background-color: #dcedc8;\n}\n\n.itemCheckList p {\n  margin-bottom: 5px;\n}\n\n.itemExpand,\n.itemExpand > p {\n  margin: 0;\n  text-align: center;\n  color: lightgrey;\n}\n\n.itemExpand:hover {\n  cursor: pointer;\n  color: black;\n}\n\n.itemTitle {\n  max-width: 87%;\n}\n.itemTitle > h3 {\n  margin-bottom: 0px;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.itemPriority {\n  flex-shrink: 0;\n}\n\n.itemPriority > p {\n  margin-bottom: 0px;\n}\n\n.closeprojectdiv {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\ninput[type="text"],\ninput[type="url"] {\n  width: 97%;\n  border: 1px solid grey;\n  margin-top: 5px;\n  margin-top: 5px;\n}\n\ninput[type="date"] {\n  border: 1px solid grey;\n  text-align: center;\n}\n\n.formNewItem {\n  margin: 5px 0;\n}\n\n.formfooter {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 20px;\n}\n\n.formfooter input {\n  width: 80px;\n}\n\ntextarea {\n  height: 100px;\n  width: 97%;\n}\n\ninput:focus {\n  outline: none;\n}\n\na {\n  color: #70c2d8;\n}\n\na:visited {\n  color: #38616c;\n}\n\na:hover {\n  cursor: pointer;\n}\n\n@media screen and (max-width: 414px) {\n  #content {\n    flex-direction: column;\n  }\n  footer p {\n    text-align: center;\n    transform: none;\n    width: 100%;\n  }\n  .projectDiv {\n    width: 94%;\n  }\n  #info {\n    width: 80%;\n    align-self: center;\n  }\n  input[type="date"],\n  input[type="text"],\n  input[type="url"],\n  select:focus,\n  textarea {\n    font-size: 16px;\n  }\n}\n\n@media screen and (min-width: 415px) and (max-width: 800px) {\n  #content {\n    width: 100%;\n    flex-direction: column;\n  }\n  .projectDiv {\n    width: 97%;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n  }\n  .closeprojectdiv {\n    width: 100%;\n  }\n  .itemDiv {\n    width: 45%;\n  }\n  .projectHeader {\n    width: 100%;\n  }\n  #info {\n    flex-direction: row;\n    width: 97%;\n    justify-content: space-around;\n  }\n  #info h3 {\n    margin-top: 0px;\n  }\n  #info button {\n    height: max-content;\n    width: 150px;\n  }\n  #info > div {\n    width: 250px;\n  }\n  footer p {\n    text-align: center;\n    transform: none;\n    width: 100%;\n  }\n  .infoDate,\n  .infoPriority {\n    width: 200px;\n  }\n\n  #closestduedate {\n    width: 100%;\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n  #closestduedate > div {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n\n  #highestPriority {\n    width: 100%;\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n  #highestPriority > div {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,sBAAsB;EACxB;EACA;IACE,kBAAkB;IAClB,eAAe;IACf,WAAW;EACb;EACA;IACE,UAAU;EACZ;EACA;IACE,UAAU;IACV,kBAAkB;EACpB;EACA;;;;;IAKE,eAAe;EACjB;AACF;;AAEA;EACE;IACE,WAAW;IACX,sBAAsB;EACxB;EACA;IACE,UAAU;IACV,mBAAmB;IACnB,eAAe;IACf,8BAA8B;EAChC;EACA;IACE,WAAW;EACb;EACA;IACE,UAAU;EACZ;EACA;IACE,WAAW;EACb;EACA;IACE,mBAAmB;IACnB,UAAU;IACV,6BAA6B;EAC/B;EACA;IACE,eAAe;EACjB;EACA;IACE,mBAAmB;IACnB,YAAY;EACd;EACA;IACE,YAAY;EACd;EACA;IACE,kBAAkB;IAClB,eAAe;IACf,WAAW;EACb;EACA;;IAEE,YAAY;EACd;;EAEA;IACE,WAAW;IACX,iBAAiB;IACjB,kBAAkB;EACpB;EACA;IACE,kBAAkB;IAClB,mBAAmB;EACrB;;EAEA;IACE,WAAW;IACX,iBAAiB;IACjB,kBAAkB;EACpB;EACA;IACE,kBAAkB;IAClB,mBAAmB;EACrB;AACF",sourcesContent:['body {\n  padding: 0;\n  margin: 10px;\n  box-sizing: border-box;\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n  min-height: 98vh;\n  display: flex;\n  flex-direction: column;\n}\n\n#content {\n  display: flex;\n  flex-direction: row;\n  gap: 15px;\n}\n\nfooter {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n}\n\nfooter p {\n  text-align: left;\n  transform: rotate(0.75turn);\n  width: max-content;\n}\n\nbutton,\ninput[type="button"],\ninput[type="submit"],\nselect {\n  border: 1px black solid;\n  background-color: white;\n}\n\nselect {\n  width: 40px;\n  text-align: center;\n  border: 1px solid grey;\n}\n\nbutton:hover {\n  cursor: pointer;\n}\n\n.removeItem,\n.editItem,\n.removeProject,\n.expandall {\n  height: 25px;\n  width: 25px;\n  padding: 0;\n  font-size: 20px;\n}\n\n.removeProject,\n.sortProject,\n.expandall,\n.closeProject {\n  border: none;\n}\n\n.expandall,\n.closeProject {\n  font-size: 16px;\n}\n\n.closeProject {\n  padding: 0;\n  margin: 0;\n}\n\n.sortProject {\n  height: 25px;\n  padding: 0;\n  padding-right: 2px;\n}\n\n#addnewproject {\n  padding: 10px 20px;\n  font-size: 16px;\n}\n\n.addItem {\n  height: 25px;\n  width: 100%;\n  font-size: 20px;\n  padding: 0;\n}\n\n.projectDiv {\n  width: 300px;\n  flex-shrink: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  border: 1px grey solid;\n  padding: 3px 10px 10px 10px;\n  height: max-content;\n  box-shadow: 0 0 0 2px white, 0 0 0 3px lightgrey;\n}\n\n#info {\n  width: 250px;\n  flex-shrink: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 0px 10px 10px 10px;\n  height: max-content;\n}\n\n.projectDiv > div,\n.infoPriority > div,\n.infoDate > div {\n  padding: 0px 10px 10px 10px;\n}\n\n.closeprojectdiv {\n  padding: 0px !important;\n}\n\n.itemDiv {\n  border: 1px dotted lightgrey;\n  max-width: 100%;\n}\n\n.projectDiv h4 {\n  margin-bottom: 0px;\n}\n\n.statusSpan {\n  width: 10px;\n  height: 10px;\n  background-color: white;\n  border: solid 1px black;\n  padding: 0;\n  margin-left: 5px;\n}\n\n.statusSpan:hover {\n  cursor: pointer;\n}\n\n.statusSpanComplete {\n  width: 25px;\n  height: 25px;\n  border: none;\n  font-size: 18px;\n  margin-left: 5px;\n}\n\n.projectHeader {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  gap: 2px;\n  padding: 0px 0px 0px 3px !important;\n}\n\n.projectHeader > h2 {\n  margin-top: 0px;\n  margin-bottom: 0px;\n  flex-grow: 1;\n}\n\n.projectHeader > button {\n  flex-shrink: 0;\n}\n\n.formDiv {\n  padding-bottom: 0px !important;\n}\n\n.itemFooter {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\n.itemHeader {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\nlabel[for="checkList"]:after {\n  content: "Separate list items with \';\'";\n  font-size: 12px;\n}\n\nlabel[for="title"]:after {\n  content: " (*required)";\n  font-size: 12px;\n}\n\nul {\n  padding-left: 0;\n}\n\nul li {\n  list-style: none;\n}\n\n.taskNotComplete:before {\n  font-family: "Line Awesome Free";\n  content: "\\F04D";\n  color: black;\n  font-weight: 900;\n  padding-left: 15px;\n  padding-right: 10px;\n}\n\n.taskNotComplete:hover {\n  cursor: pointer;\n}\n\nli.taskComplete {\n  text-decoration: line-through;\n}\n\nli.taskComplete:before {\n  font-family: "Line Awesome Free";\n  content: "\\F14A";\n  color: black;\n  font-weight: 900;\n  padding-left: 15px;\n  padding-right: 10px;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.priority5 i {\n  border-radius: 25px;\n  background-color: #ffccbc;\n}\n\n.priority3 i,\n.priority4 i {\n  border-radius: 25px;\n  background-color: #fff9c4;\n}\n\n.priority1 i,\n.priority2 i {\n  border-radius: 25px;\n  background-color: #dcedc8;\n}\n\n.itemCheckList p {\n  margin-bottom: 5px;\n}\n\n.itemExpand,\n.itemExpand > p {\n  margin: 0;\n  text-align: center;\n  color: lightgrey;\n}\n\n.itemExpand:hover {\n  cursor: pointer;\n  color: black;\n}\n\n.itemTitle {\n  max-width: 87%;\n}\n.itemTitle > h3 {\n  margin-bottom: 0px;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.itemPriority {\n  flex-shrink: 0;\n}\n\n.itemPriority > p {\n  margin-bottom: 0px;\n}\n\n.closeprojectdiv {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\ninput[type="text"],\ninput[type="url"] {\n  width: 97%;\n  border: 1px solid grey;\n  margin-top: 5px;\n  margin-top: 5px;\n}\n\ninput[type="date"] {\n  border: 1px solid grey;\n  text-align: center;\n}\n\n.formNewItem {\n  margin: 5px 0;\n}\n\n.formfooter {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 20px;\n}\n\n.formfooter input {\n  width: 80px;\n}\n\ntextarea {\n  height: 100px;\n  width: 97%;\n}\n\ninput:focus {\n  outline: none;\n}\n\na {\n  color: #70c2d8;\n}\n\na:visited {\n  color: #38616c;\n}\n\na:hover {\n  cursor: pointer;\n}\n\n@media screen and (max-width: 414px) {\n  #content {\n    flex-direction: column;\n  }\n  footer p {\n    text-align: center;\n    transform: none;\n    width: 100%;\n  }\n  .projectDiv {\n    width: 94%;\n  }\n  #info {\n    width: 80%;\n    align-self: center;\n  }\n  input[type="date"],\n  input[type="text"],\n  input[type="url"],\n  select:focus,\n  textarea {\n    font-size: 16px;\n  }\n}\n\n@media screen and (min-width: 415px) and (max-width: 800px) {\n  #content {\n    width: 100%;\n    flex-direction: column;\n  }\n  .projectDiv {\n    width: 97%;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n  }\n  .closeprojectdiv {\n    width: 100%;\n  }\n  .itemDiv {\n    width: 45%;\n  }\n  .projectHeader {\n    width: 100%;\n  }\n  #info {\n    flex-direction: row;\n    width: 97%;\n    justify-content: space-around;\n  }\n  #info h3 {\n    margin-top: 0px;\n  }\n  #info button {\n    height: max-content;\n    width: 150px;\n  }\n  #info > div {\n    width: 250px;\n  }\n  footer p {\n    text-align: center;\n    transform: none;\n    width: 100%;\n  }\n  .infoDate,\n  .infoPriority {\n    width: 200px;\n  }\n\n  #closestduedate {\n    width: 100%;\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n  #closestduedate > div {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n\n  #highestPriority {\n    width: 100%;\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n  #highestPriority > div {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n}\n'],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,i=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,i,o=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(e){c=!0,i=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw i}}return o}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(l," */"),d=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(d).concat([s]).join("\n")}return[o].join("\n")}},379:(e,t,n)=>{var r,i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function a(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],i=0;i<e.length;i++){var c=e[i],l=t.base?c[0]+t.base:c[0],s=n[l]||0,d="".concat(l," ").concat(s);n[l]=s+1;var u=a(d),A={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(o[u].references++,o[u].updater(A)):o.push({identifier:d,updater:f(A,t),references:1}),r.push(d)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,d=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function u(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function A(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,p=0;function f(e,t){var n,r,i;if(t.singleton){var o=p++;n=m||(m=l(t)),r=u.bind(null,n,o,!1),i=u.bind(null,n,o,!0)}else n=l(t),r=A.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=a(n[r]);o[i].references--}for(var l=c(e,t),s=0;s<n.length;s++){var d=a(n[s]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}n=l}}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{n.d(r,{t:()=>He,m:()=>Fe});class e{constructor(e,t,n){this.title=e,this.name=t,this.items=[]}}const t=function(){let t=[];const n=function(e,t){const n=window.localStorage,r=n.getItem(e),i=JSON.parse(r);i.items.push(t);const o=JSON.stringify(i);n.setItem(e,o)};return{removeItemFromProject:function(e,n){let r=window.localStorage;const i=r.getItem(e);let o=JSON.parse(i),a=o.items;for(let r=0;r<t.length;r++){const i=t[r];if(i.name===e){let e=i.items;const t=n.itemID;for(let n=0;n<e.length;n++)if(e[n].itemID===t){a.splice(n,1),e.splice(n,1);break}}}o.items=a;const c=JSON.stringify(o);r.setItem(e,c)},projectCollection:function(n,r){const i=function(t,n,r){const i=window.localStorage;for(let e=0;e<i.length;e++)if(i.key(e)===n){const t=i.getItem(i.key(e));return JSON.parse(t)}const o=new e(t,n,[]),a=JSON.stringify(o);return i.setItem(o.name,a),o}(n,r);return t.push(i),i},addItemToProject:function(e,r){for(let i=0;i<t.length;i++){const o=t[i];if(o.name===e){o.items.push(r),n(e,r);break}}},projectsCreated:t,updateProjectArray:function(e){t=e},editItemInProject:function(e){const t=window.localStorage;let n=t.getItem(e.project),r=JSON.parse(n),i=r.items;for(let t=0;t<i.length;t++)if(i[t].itemID===e.itemID){i.splice(t,1,e);break}r.items=i;const o=JSON.stringify(r);t.setItem(e.project,o)}}}();function i(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){i(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function a(e){i(1,arguments);var t=o(e);return!isNaN(t)}var c={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function l(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var s,d={date:l({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:l({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:l({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function A(e){return function(t,n){var r,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=i.width?String(i.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var c=e.defaultWidth,l=i.width?String(i.width):e.defaultWidth;r=e.values[l]||e.values[c]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function m(e){return function(t,n){var r=String(t),i=n||{},o=i.width,a=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],c=r.match(a);if(!c)return null;var l,s=c[0],d=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth];return l="[object Array]"===Object.prototype.toString.call(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d),l=e.valueCallback?e.valueCallback(l):l,{value:l=i.valueCallback?i.valueCallback(l):l,rest:r.slice(s.length)}}}const p={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof c[e]?c[e]:1===t?c[e].one:c[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:d,formatRelative:function(e,t,n,r){return u[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:A({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:A({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:A({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:A({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:A({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(s={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},i=n.match(s.matchPattern);if(!i)return null;var o=i[0],a=n.match(s.parsePattern);if(!a)return null;var c=s.valueCallback?s.valueCallback(a[0]):a[0];return{value:c=r.valueCallback?r.valueCallback(c):c,rest:n.slice(o.length)}}),era:m({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:m({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:m({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:m({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:m({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function f(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function h(e,t){i(2,arguments);var n=o(e).getTime(),r=f(t);return new Date(n+r)}function g(e,t){i(2,arguments);var n=f(t);return h(e,-n)}function E(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const C=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return E("yy"===t?r%100:r,t.length)},b=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):E(n+1,2)},y=function(e,t){return E(e.getUTCDate(),t.length)},x=function(e,t){return E(e.getUTCHours()%12||12,t.length)},v=function(e,t){return E(e.getUTCHours(),t.length)},w=function(e,t){return E(e.getUTCMinutes(),t.length)},B=function(e,t){return E(e.getUTCSeconds(),t.length)},D=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return E(Math.floor(r*Math.pow(10,n-3)),t.length)};var k=864e5;function I(e){i(1,arguments);var t=1,n=o(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function T(e){i(1,arguments);var t=o(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=I(r),c=new Date(0);c.setUTCFullYear(n,0,4),c.setUTCHours(0,0,0,0);var l=I(c);return t.getTime()>=a.getTime()?n+1:t.getTime()>=l.getTime()?n:n-1}function S(e){i(1,arguments);var t=T(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=I(n);return r}var j=6048e5;function P(e,t){i(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,c=null==a?0:f(a),l=null==n.weekStartsOn?c:f(n.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=o(e),d=s.getUTCDay(),u=(d<l?7:0)+d-l;return s.setUTCDate(s.getUTCDate()-u),s.setUTCHours(0,0,0,0),s}function M(e,t){i(1,arguments);var n=o(e,t),r=n.getUTCFullYear(),a=t||{},c=a.locale,l=c&&c.options&&c.options.firstWeekContainsDate,s=null==l?1:f(l),d=null==a.firstWeekContainsDate?s:f(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,d),u.setUTCHours(0,0,0,0);var A=P(u,t),m=new Date(0);m.setUTCFullYear(r,0,d),m.setUTCHours(0,0,0,0);var p=P(m,t);return n.getTime()>=A.getTime()?r+1:n.getTime()>=p.getTime()?r:r-1}function L(e,t){i(1,arguments);var n=t||{},r=n.locale,o=r&&r.options&&r.options.firstWeekContainsDate,a=null==o?1:f(o),c=null==n.firstWeekContainsDate?a:f(n.firstWeekContainsDate),l=M(e,t),s=new Date(0);s.setUTCFullYear(l,0,c),s.setUTCHours(0,0,0,0);var d=P(s,t);return d}var N=6048e5;function U(e,t){var n=e>0?"-":"+",r=Math.abs(e),i=Math.floor(r/60),o=r%60;if(0===o)return n+String(i);var a=t||"";return n+String(i)+a+E(o,2)}function Y(e,t){return e%60==0?(e>0?"-":"+")+E(Math.abs(e)/60,2):q(e,t)}function q(e,t){var n=t||"",r=e>0?"-":"+",i=Math.abs(e);return r+E(Math.floor(i/60),2)+n+E(i%60,2)}const W={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),i=r>0?r:1-r;return n.ordinalNumber(i,{unit:"year"})}return C(e,t)},Y:function(e,t,n,r){var i=M(e,r),o=i>0?i:1-i;return"YY"===t?E(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):E(o,t.length)},R:function(e,t){return E(T(e),t.length)},u:function(e,t){return E(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return E(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return E(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return b(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return E(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){i(1,arguments);var n=o(e),r=P(n,t).getTime()-L(n,t).getTime();return Math.round(r/N)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):E(a,t.length)},I:function(e,t,n){var r=function(e){i(1,arguments);var t=o(e),n=I(t).getTime()-S(t).getTime();return Math.round(n/j)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):E(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):y(e,t)},D:function(e,t,n){var r=function(e){i(1,arguments);var t=o(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/k)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):E(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var i=e.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return E(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});case"eeee":default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var i=e.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return E(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});case"cccc":default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),i=0===r?7:r;switch(t){case"i":return String(i);case"ii":return E(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,i=e.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,i=e.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return x(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):v(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):E(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):E(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):w(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):B(e,t)},S:function(e,t){return D(e,t)},X:function(e,t,n,r){var i=(r._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return Y(i);case"XXXX":case"XX":return q(i);case"XXXXX":case"XXX":default:return q(i,":")}},x:function(e,t,n,r){var i=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Y(i);case"xxxx":case"xx":return q(i);case"xxxxx":case"xxx":default:return q(i,":")}},O:function(e,t,n,r){var i=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+U(i,":");case"OOOO":default:return"GMT"+q(i,":")}},z:function(e,t,n,r){var i=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+U(i,":");case"zzzz":default:return"GMT"+q(i,":")}},t:function(e,t,n,r){var i=r._originalDate||e;return E(Math.floor(i.getTime()/1e3),t.length)},T:function(e,t,n,r){return E((r._originalDate||e).getTime(),t.length)}};function H(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function O(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const F={p:O,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),i=r[1],o=r[2];if(!o)return H(e,t);switch(i){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",H(i,t)).replace("{{time}}",O(o,t))}};function z(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var X=["D","DD"],Z=["YY","YYYY"];function Q(e){return-1!==X.indexOf(e)}function R(e){return-1!==Z.indexOf(e)}function J(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var G=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,V=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,$=/^'([^]*?)'?$/,_=/''/g,K=/[a-zA-Z]/;function ee(e){return e.match($)[1].replace(_,"'")}function te(){return function(e,t,n){i(2,arguments);var r=String(t),c=n||{},l=c.locale||p,s=l.options&&l.options.firstWeekContainsDate,d=null==s?1:f(s),u=null==c.firstWeekContainsDate?d:f(c.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=l.options&&l.options.weekStartsOn,m=null==A?0:f(A),h=null==c.weekStartsOn?m:f(c.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!l.localize)throw new RangeError("locale must contain localize property");if(!l.formatLong)throw new RangeError("locale must contain formatLong property");var E=o(e);if(!a(E))throw new RangeError("Invalid time value");var C=z(E),b=g(E,C),y={firstWeekContainsDate:u,weekStartsOn:h,locale:l,_originalDate:E};return r.match(V).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,F[t])(e,l.formatLong,y):e})).join("").match(G).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return ee(n);var i=W[r];if(i)return!c.useAdditionalWeekYearTokens&&R(n)&&J(n,t,e),!c.useAdditionalDayOfYearTokens&&Q(n)&&J(n,t,e),i(b,n,l.localize,y);if(r.match(K))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("")}(Date.now(),"yyyy-MM-dd")}class ne{constructor(e,t,n,r,i,o,a,c,l,s,d){this.title=e,this.description=t,this.dueDate=n,this.priority=r,this.creationDate=i,this.notes=o,this.url=a,this.project=l,this.done=d,this.itemID=l+"item"+s,this.checkList=re(c,this.itemID)}}function re(e,t){if(""===e)return"";const n=e.split(";");let r={};for(let e=0;e<n.length;e++){const i=n[e].trim(),o="task"+t+e,a=o+"Status";r[o]=i,r[a]=!1}return r}const ie=function(){let e=[];const t=function(t,n,r){return"add"===n?(e.push(r),e):(null===t&&null===n&&null===r||(e=t),e)},n=function(n){for(let r=0;r<e.length;r++)if(e[r].itemID===n.itemID){let n=e.slice(0,r).concat(e.slice(r+1));e=t(n,"remove",null)}};return{createNewItem:function(n,r,i,o,a,c,l,s,d){const u=te(),A=new ne(n,r,i,o,u,a,c,l,s,d,!1);return t(e,"add",A),A},updateItemList:t,removeItemFromList:n,itemList:e,removeAllItemsFromProject:function(t){const r=e;for(let e=0;e<r.length;e++){const i=r[e];i.project===t&&n(i)}},retrieveItem:function(t){for(let n=0;n<e.length;n++)if(e[n].itemID===t)return e[n]}}}();function oe(e,t){i(2,arguments);var n=o(e),r=o(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}var ae=36e5,ce={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},le=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,se=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,de=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ue(e,t){i(1,arguments);var n=t||{},r=null==n.additionalDigits?2:f(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,a=Ae(e);if(a.date){var c=me(a.date,r);o=pe(c.restDateString,c.year)}if(isNaN(o)||!o)return new Date(NaN);var l,s=o.getTime(),d=0;if(a.time&&(d=he(a.time),isNaN(d)||null===d))return new Date(NaN);if(!a.timezone){var u=new Date(s+d),A=new Date(0);return A.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),A.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),A}return l=Ee(a.timezone),isNaN(l)?new Date(NaN):new Date(s+d+l)}function Ae(e){var t,n={},r=e.split(ce.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],ce.timeZoneDelimiter.test(n.date)&&(n.date=e.split(ce.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var i=ce.timezone.exec(t);i?(n.time=t.replace(i[1],""),n.timezone=i[1]):n.time=t}return n}function me(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var i=r[1]&&parseInt(r[1]),o=r[2]&&parseInt(r[2]);return{year:null==o?i:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function pe(e,t){if(null===t)return null;var n=e.match(le);if(!n)return null;var r=!!n[4],i=fe(n[1]),o=fe(n[2])-1,a=fe(n[3]),c=fe(n[4]),l=fe(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,c,l)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var i=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+i),r}(t,c,l):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(Ce[t]||(be(e)?29:28))}(t,o,a)&&function(e,t){return t>=1&&t<=(be(e)?366:365)}(t,i)?(s.setUTCFullYear(t,o,Math.max(i,a)),s):new Date(NaN)}function fe(e){return e?parseInt(e):1}function he(e){var t=e.match(se);if(!t)return null;var n=ge(t[1]),r=ge(t[2]),i=ge(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,i)?n*ae+6e4*r+1e3*i:NaN}function ge(e){return e&&parseFloat(e.replace(",","."))||0}function Ee(e){if("Z"===e)return 0;var t=e.match(de);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),i=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,i)?n*(r*ae+6e4*i):NaN}var Ce=[31,null,31,30,31,30,31,31,30,31,30,31];function be(e){return e%400==0||e%4==0&&e%100}function ye(e,t){let n;void 0!==t&&(n=t);for(let t=0;t<e.length;t++){const r=e[t];if(r.done)continue;const i=r.priority;if(void 0!==n){if(i>n.priority&&(n=r,"5"===i))break}else n=r}return n}function xe(e,t){let n;return void 0!==t&&(n=t),e.priority>n.priority?e:n}function ve(e,t){let n;void 0!==t&&(n=t);for(let t=0;t<e.length;t++){const r=e[t],i=r.dueDate;""===i||r.done||(""===i||void 0!==n?1===oe(ue(n.dueDate),ue(i))&&(n=r):n=r)}return n}function we(e,t){let n;return void 0!==t&&(n=t),1===oe(ue(n.dueDate),ue(e.dueDate))&&(n=e),n}function Be(e){const t=document.querySelector(".infoPriority"),n=document.querySelector(".infoDate");if(null===t)e.priority>1&&ke(e,"priority");else if(Number(e.priority)>1){const n=t.getAttribute("id").replace("infoP",""),r=ie.updateItemList(null,null,null);let i;for(let t=0;t<r.length;t++){const o=r[t];if(o.itemID===n){i=xe(e,o);break}}ke(i,"priority")}if(null===n)""!==e.dueDate&&ke(e,"duedate");else{const t=n.getAttribute("id").replace("infoD",""),r=ie.updateItemList(null,null,null);let i;for(let n=0;n<r.length;n++){const o=r[n];if(o.itemID===t){i=we(e,o);break}}ke(i,"duedate")}}function De(e){if("priority"===e){let e;const t=ie.updateItemList(null,null,null);for(let n=0;n<t.length;n++)t[n],e=ye(t,e);if(void 0!==e&&"1"!==e.priority)ke(e,"priority");else{const e=document.querySelector(".infoPriority");null!==e&&e.remove()}}else{let e;const t=ie.updateItemList(null,null,null);for(let n=0;n<t.length;n++)t[n],e=ve(t,e);if(void 0!==e&&""!==e.dueDate)ke(e,"duedate");else{const e=document.querySelector(".infoDueDate");null!==e&&e.remove()}}}function ke(e,t){const n=document.getElementById("info");let r=document.querySelector(".infoPriority"),i=document.querySelector(".infoDate");if("priority"===t){null!==r&&r.remove(),r=document.createElement("div"),r.setAttribute("class","infoPriority"),r.setAttribute("id","infoP"+e.itemID);const t=document.createElement("h3");t.textContent="Highest Priority:",n.hasChildNodes()?n.insertBefore(r,i):n.appendChild(r),r.appendChild(t),Se(e,r,"highestPriority")}else{null!==i&&i.remove(),i=document.createElement("div"),i.setAttribute("class","infoDate"),i.setAttribute("id","infoD"+e.itemID);const t=document.createElement("h3");t.textContent="Closest Deadline:",n.appendChild(i),i.appendChild(t),Se(e,i,"closestduedate")}}function Ie(e){const n=document.getElementById("content"),r=document.querySelectorAll("div#content > div.projectDiv");let i=0;for(let e=0;e<r.length;e++){let t=r[e].id.replace("project","");i<t&&(i=t)}const o=Number(i)+1,a=document.createElement("div");let c,l;if(null===e&&"default"!==e){if(c=window.prompt("Project Name:"),l="project"+o,null===c||""===c)return}else"default"===e?(c="Default List",l="project0"):(c=e.name,l=e.name);const s=t.projectCollection(c,l),d=document.createElement("div");d.setAttribute("class","projectHeader");const u=document.createElement("div");u.setAttribute("class","closeprojectdiv");const A=document.createElement("h2");A.textContent=s.title,a.setAttribute("id",l),a.setAttribute("class","projectDiv"),n.appendChild(a),a.appendChild(u),a.appendChild(d),d.appendChild(A),function(e){const n=document.createElement("button"),r="button"+e.id;n.setAttribute("id",r),n.setAttribute("name",e.id),n.setAttribute("title","Add new item"),n.setAttribute("class","addItem"),n.innerHTML='<i class="las la-plus-square"></i>',e.appendChild(n),n.addEventListener("click",(function(){const n=document.querySelector(".formDiv");if(null!==n&&n.hasChildNodes())return;const r=document.createElement("h4");r.textContent="New Item",e.appendChild(r),je(e,"new"),function(e){document.getElementById("cancelAdd").addEventListener("click",(function(){document.getElementById("form"+e.id).remove();const t=document.querySelector("h4");null!==t&&t.remove()})),document.getElementById("title").focus(),document.querySelector("form").addEventListener("submit",(n=>{n.preventDefault();const r=new FormData(n.target);let i=[];for(const e of r.entries())i.push(e[1]);const o=e.id,a=e.querySelectorAll("div.itemDiv");let c;if(0===a.length)c=0;else for(let e=0;e<a.length;e++){const t=a[e].getAttribute("id"),n=t.lastIndexOf("item"),r=t.slice(n+4);(void 0===c||c<Number(r)+1)&&(c=Number(r)+1)}const l=ie.createNewItem(i[0],i[1],i[2],i[3],i[4],i[5],i[6],o,c);t.addItemToProject(o,l),Te(l,e),Be(l),document.querySelector("form").remove()}))}(e)}))}(document.getElementById(l));const m=document.createElement("button");m.setAttribute("class","closeProject"),m.setAttribute("title","Delete Project"),m.innerHTML='<i class="lar la-window-close"></i>',m.addEventListener("click",(function(){Pe(l)})),u.appendChild(m);const p=document.createElement("button");p.setAttribute("class","removeProject"),p.setAttribute("title","Delete Project"),p.innerHTML='<i class="las la-trash"></i>',p.addEventListener("click",(function(){Pe(l)})),d.appendChild(p);const f=document.createElement("button");f.setAttribute("class","sortProject"),f.setAttribute("title","Sort by Priority"),f.innerHTML='<i class="las la-sort-up"></i><span>P</span>',f.addEventListener("click",(function(){Fe(l)})),d.appendChild(f);const h=document.createElement("button");h.setAttribute("class","sortProject"),h.setAttribute("title","Sort by Due Date"),h.innerHTML='<i class="las la-sort-up"></i><span>D</span>',h.addEventListener("click",(function(){He(l)})),d.appendChild(h);const g=document.createElement("button");g.setAttribute("class","expandall"),g.classList.add("collapsed"),g.setAttribute("title","Expand All"),g.innerHTML='<i class="las la-angle-double-down"></i>',g.addEventListener("click",(function(e){const n=e.currentTarget.parentNode.parentNode.getAttribute("id");let r;t.projectsCreated.forEach((function(e){e.name===n&&(r=e.items)})),g.classList.contains("collapsed")?(r.forEach((e=>Ue(e,"show"))),g.setAttribute("title","Collapse All"),g.classList.remove("collapsed"),g.classList.add("expanded"),g.innerHTML='<i class="las la-angle-double-up"></i>'):(r.forEach((e=>Ue(e,"hide"))),g.setAttribute("title","Expand All"),g.classList.remove("expanded"),g.classList.add("collapsed"),g.innerHTML='<i class="las la-angle-double-down"></i>')})),d.appendChild(g)}function Te(e,n,r){let i=document.getElementById(e.itemID);null===i&&(i=document.createElement("div"),i.setAttribute("class","itemDiv"),i.setAttribute("id",e.itemID),n.appendChild(i));const o=document.querySelector("h4");null!==o&&o.remove(),function(e,t,n){const r=document.createElement("div"),i=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),c=document.createElement("div"),l=document.createElement("div"),s=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),A=document.createElement("div"),m=[r,i,o,a,c,l,s,d,u,A],p=["itemHeader","itemTitle","itemExpand","itemStatus","itemDescription","itemDueDate","itemPriority","itemNotes","itemUrl","itemCheckList"];for(let e=0;e<m.length;e++)m[e].setAttribute("class",p[e]);s.setAttribute("title","Priority");const f=document.createElement("h3"),h=document.createElement("p"),g=document.createElement("p"),E=document.createElement("span");E.setAttribute("class","statusSpan");const C=document.createElement("p"),b=document.createElement("p"),y=document.createElement("p"),x=document.createElement("p"),v=document.createElement("p"),w=document.createElement("a");let B;if(void 0!==e.checkList&&""!==e.checkList){B=function(e,t){const n=document.createElement("ul");for(const[r,i]of Object.entries(t))if("boolean"!=typeof i){const o=document.createElement("li");o.textContent=i,o.setAttribute("id",r),t[r+"Status"]?o.setAttribute("class","taskComplete"):(o.setAttribute("class","taskNotComplete"),o.addEventListener("click",(function(t){Ne(t,o,e)}))),n.appendChild(o)}return n}(e,e.checkList);const t=document.createElement("p"),n=Le(e);t.innerHTML='<i class="las la-tasks"></i> Tasks ('+n[0]+"/"+n[1]+")",A.appendChild(t)}else B=document.createElement("p"),B.textContent=e.checkList;f.textContent=e.title,""!=e.description&&(C.textContent="Description: "+e.description),g.textContent="Not Finished",E.style.display="inline-block",""!=e.dueDate&&(b.textContent="Due: "+e.dueDate),""!=e.priority&&(y.innerHTML='<i class="las la-exclamation"></i>'+e.priority),s.classList.add("priority"+e.priority),""!=e.notes&&(x.textContent="Notes: "+e.notes),""!==e.url&&(v.innerHTML='<i class="las la-external-link-alt"></i>',v.appendChild(w),w.textContent=e.url,w.setAttribute("href",e.url)),h.innerHTML='<i class="las la-angle-double-down"></i>';const D=[r,o,a,c,d,u,l,A];for(let e=0;e<D.length;e++)t.appendChild(D[e]);r.appendChild(i),r.appendChild(s),i.appendChild(f),o.appendChild(h),s.appendChild(y),a.appendChild(g),g.appendChild(E),c.appendChild(C),l.appendChild(b),d.appendChild(x),u.appendChild(v),A.appendChild(B)}(e,i),i.querySelector(".statusSpan").addEventListener("click",(function(){!function(e){ie.removeItemFromList(e),e.done=!0,function(e){const t=e.checkList;for(const[e,n]of Object.entries(t))if(!n){t[e]=!0;const n=e.replace("Status","");document.getElementById(n).setAttribute("class","taskComplete")}const n=document.getElementById(e.itemID).querySelector(".itemCheckList").querySelector("p"),r=Le(e);n.innerHTML='<i class="las la-tasks"></i> Tasks ('+r[0]+"/"+r[1]+")"}(e),ie.updateItemList(null,"add",e),t.editItemInProject(e),Me(e);const n=document.querySelector(".infoPriority"),r=document.querySelector(".infoDate");null!==n&&n.getAttribute("id").slice(5)===e.itemID&&(n.remove(),De("priority")),null!==r&&r.getAttribute("id").slice(5)===e.itemID&&(console.log("sim"),r.remove(),De("duedate"));document.getElementById(e.itemID).querySelector(".editItem").remove()}(e)})),Ue(e,"show"),i.querySelector(".itemExpand").addEventListener("click",(function(){i.classList.contains("hidden")?Ue(e,"show"):Ue(e,"hide")}));const a=document.createElement("div");a.setAttribute("class","itemFooter"),document.getElementById(e.itemID).appendChild(a),function(e,n){window.localStorage;const r=document.createElement("button"),i=document.getElementById(e.itemID);r.setAttribute("class","removeItem"),r.setAttribute("title","Delete item"),r.innerHTML='<i class="las la-trash"></i>',r.addEventListener("click",(function(){i.remove(),ie.removeItemFromList(e),t.removeItemFromProject(e.project,e),De("priority"),De("duedate")})),n.appendChild(r)}(e,a),function(e,n,r){if(e.done)return;const i=document.createElement("button");i.setAttribute("class","editItem"),i.setAttribute("title","Edit item"),i.innerHTML='<i class="las la-edit"></i>',i.addEventListener("click",(function(){null===document.querySelector("form")?function(e){const n=document.getElementById(e.itemID),r=document.createElement("h4");r.textContent="Edit Item",n.appendChild(r),je(n,"edit");const i=document.getElementById("title"),o=document.getElementById("description"),a=document.getElementById("dueDate"),c=document.getElementById("priority"),l=document.getElementById("notes"),s=document.getElementById("link"),d=document.getElementById("checkList");var u;i.value=e.title,o.value=e.description,a.value=e.dueDate,c.value=e.priority,l.value=e.notes,s.value=e.url,d.value=(u=e.checkList,Object.values(u).filter((e=>"boolean"!=typeof e)).toString().replaceAll(",",";")),function(e){document.getElementById("title").focus(),document.querySelector("form").addEventListener("submit",(n=>{n.preventDefault();const r=new FormData(n.target);let i=[];for(const e of r.entries())i.push(e[1]);const o=ie.updateItemList(null,null,null);let a;for(let t=0;t<o.length&&(a=o[t],a.itemID!==e.id);t++);t.removeItemFromProject(a.project,a),ie.removeItemFromList(a),e.replaceChildren(),a.title=i[0],a.description=i[1],a.dueDate=i[2],a.priority=i[3],a.notes=i[4],a.url=i[5],a.checkList=re(i[6],a.ID),t.addItemToProject(a.project,a),ie.updateItemList(null,"add",a),Te(a,e,a.project),Be(a);const c=document.querySelector("form");null!==c&&c.remove()}))}(n)}(e):alert("Finish editing or cancel previous item first.")})),n.appendChild(i)}(e,a),function(e){if("itemDiv"===e.getAttribute("class"))return;const t=e.querySelector(".addItem");e.removeChild(t),e.appendChild(t)}(document.getElementById(e.project))}function Se(e,t,n){let r=document.createElement("div");r.setAttribute("class","itemDiv"),r.setAttribute("id",n),t.appendChild(r);const i=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),c=document.createElement("div"),l=document.createElement("div"),s=[i,o,a,c,l],d=["itemHeader","itemTitle","itemDescription","itemDueDate","itemPriority"];for(let e=0;e<s.length;e++)s[e].setAttribute("class",d[e]);l.setAttribute("title","Priority");const u=document.createElement("h3"),A=document.createElement("p"),m=document.createElement("p"),p=document.createElement("p");u.textContent=e.title,""!=e.description&&(A.textContent="Description: "+e.description),""!=e.dueDate&&(m.textContent="Due: "+e.dueDate),""!=e.priority&&(p.innerHTML='<i class="las la-exclamation"></i>'+e.priority),l.classList.add("priority"+e.priority);const f=[i,a,c];for(let e=0;e<f.length;e++)r.appendChild(f[e]);i.appendChild(o),i.appendChild(l),o.appendChild(u),l.appendChild(p),a.appendChild(A),c.appendChild(m)}function je(e,t){const n=document.createElement("div");n.setAttribute("class","formDiv");const r=document.createElement("form");r.setAttribute("method","get"),r.setAttribute("class","formNewItem");const i="form"+e.id;r.setAttribute("id",i);const o=document.createElement("div");o.setAttribute("class","formNewItem");const a=document.createElement("label");a.setAttribute("for","title"),a.innerHTML="Title:";const c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("name","title"),c.setAttribute("id","title"),c.required=!0;const l=document.createElement("div");l.setAttribute("class","formNewItem");const s=document.createElement("label");s.setAttribute("for","description"),s.textContent="Description: ";const d=document.createElement("input");d.setAttribute("type","text"),d.setAttribute("name","description"),d.setAttribute("id","description");const u=te(),A=document.createElement("div");A.setAttribute("class","formNewItem");const m=document.createElement("label");m.setAttribute("for","dueDate"),m.textContent="Deadline: ";const p=document.createElement("input");p.setAttribute("type","date"),p.setAttribute("name","dueDate"),p.setAttribute("id","dueDate"),p.setAttribute("value","YYYY-MM-DD"),p.setAttribute("min",u);const f=document.createElement("div");f.setAttribute("class","formNewItem");const h=document.createElement("label");h.setAttribute("for","priority"),h.textContent="Priority: ";const g=document.createElement("select");g.setAttribute("name","priority"),g.setAttribute("id","priority");for(let e=1;e<6;e++){const t=document.createElement("option");t.setAttribute("value",e),t.textContent=e,g.appendChild(t)}const E=document.createElement("div");E.setAttribute("class","formNewItem");const C=document.createElement("label");C.setAttribute("for","notes"),C.innerHTML="Notes: <br>";const b=document.createElement("textarea");b.setAttribute("name","notes"),b.setAttribute("id","notes"),b.setAttribute("maxlength","500"),b.style.resize="none";const y=document.createElement("div");y.setAttribute("class","formNewItem");const x=document.createElement("label");x.setAttribute("for","link"),x.textContent="Add a link:";const v=document.createElement("input");v.setAttribute("type","url"),v.setAttribute("name","link"),v.setAttribute("id","link");const w=document.createElement("div");w.setAttribute("class","formNewItem"),w.setAttribute("title","Separate items with ';'");const B=document.createElement("label");B.setAttribute("for","checkList"),B.textContent="Check List: ";const D=document.createElement("input");D.setAttribute("type","text"),D.setAttribute("name","checkList"),D.setAttribute("id","checkList");const k=[c,d,p,g,b,v,D],I=[a,s,m,h,C,x,B];[o,l,A,f,E,y,w].forEach((function(e,t){e.appendChild(I[t]),e.appendChild(k[t]),r.appendChild(e)})),e.appendChild(n),n.appendChild(r);const T=document.createElement("div"),S=document.createElement("div"),j=document.createElement("div");if(j.setAttribute("class","formfooter"),"new"===t){T.setAttribute("class","formNewItem");const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","Add"),T.appendChild(e),S.setAttribute("class","formNewItem");const t=document.createElement("input");t.setAttribute("type","button"),t.setAttribute("value","Cancel"),t.setAttribute("id","cancelAdd"),S.appendChild(t),j.appendChild(T),j.appendChild(S),r.appendChild(j)}else{T.setAttribute("class","formNewItem");const e=document.createElement("input");e.setAttribute("type","submit"),e.setAttribute("value","Save"),T.appendChild(e),j.appendChild(T),r.appendChild(j)}}function Pe(e){const n=document.getElementById(e);ie.updateItemList(null,null,null),n.remove();const r=t.projectsCreated;for(let n=0;n<r.length;n++)if(r[n].name===e){let e=r.slice(0,n).concat(r.slice(n+1));t.updateProjectArray(e);break}ie.removeAllItemsFromProject(e),De("priority"),De("duedate");const i=window.localStorage;for(let t=0;t<i.length;t++){const n=i.key(t);n===e&&i.removeItem(n)}return t.projectsCreated}function Me(e){const t=document.getElementById(e.itemID).querySelector(".itemStatus > p"),n=document.createElement("span");n.setAttribute("class","statusSpanComplete"),t.textContent="Done!",n.style.display="inline-block",n.innerHTML='<i class="lar la-check-square"></i>',t.appendChild(n)}function Le(e){const t=e.checkList,n=Object.values(t);let r=0,i=Number(n.length)/2;return n.forEach((function(e){"boolean"==typeof e&&e&&++r})),[r,i]}function Ne(e,n,r){if("taskComplete"===e.target.getAttribute("class"))return;e.target.setAttribute("class","taskComplete"),ie.removeItemFromList(r),r.checkList[n.getAttribute("id")+"Status"]=!0,ie.updateItemList(null,"add",r),t.editItemInProject(r);const i=document.getElementById(r.itemID).querySelector(".itemCheckList").querySelector("p"),o=Le(r);i.innerHTML='<i class="las la-tasks"></i> Tasks ('+o[0]+"/"+o[1]+")"}function Ue(e,t){const n=document.getElementById(e.itemID),r=n.querySelector(".itemDescription"),i=n.querySelector(".itemStatus"),o=n.querySelector(".itemNotes"),a=n.querySelector(".itemUrl"),c=n.querySelector(".itemCheckList"),l=n.querySelector(".itemExpand");"hide"===t?(n.classList.contains("show")&&n.classList.remove("show"),n.classList.add("hidden"),r.style.display="none",i.style.display="none",o.style.display="none",a.style.display="none",c.style.display="none",l.innerHTML='<i class="las la-angle-double-down"></i>'):(n.classList.contains("hidden")&&n.classList.remove("hidden"),n.classList.add("show"),r.style.display="contents",i.style.display="contents",o.style.display="contents",a.style.display="contents",c.style.display="contents",l.innerHTML='<i class="las la-angle-double-up"></i>')}window.onload=function(){const e=window.localStorage;if(0!==e.length){let t=[];for(let n=0;n<e.length;n++){let r=e.key(n).replace("project","");t.push(r)}t.sort();for(let n=0;n<e.length;n++){const r=e.getItem("project"+t[n]),i=JSON.parse(r);Ie(i);const o=i.items,a=document.getElementById(i.name);for(let e=0;e<o.length;e++){const t=o[e];Te(t,a),Ue(t,"hide"),ie.updateItemList(null,"add",t),t.done&&Me(t)}}}}();var Ye=n(379),qe=n.n(Ye),We=n(426);function He(e){const t=document.getElementById(e),n=t.querySelectorAll(".itemDiv"),r=ie.updateItemList(null,null,null);let i=[];for(let t=0;t<r.length;t++){const n=r[t];n.project===e&&i.push(n)}i.sort(Oe),n.forEach((e=>e.remove())),i.forEach((function(e){Te(e,t),Ue(e,"hide"),e.done&&Me(e)}))}function Oe(e,t){return e.done?1:t.done?-1:oe(ue(e.dueDate),ue(t.dueDate))}function Fe(e){const t=document.getElementById(e),n=t.querySelectorAll(".itemDiv"),r=ie.updateItemList(null,null,null);let i=[];for(let t=0;t<r.length;t++){const n=r[t];n.project===e&&i.push(n)}i.sort(ze),n.forEach((e=>e.remove())),i.forEach((function(e){Te(e,t),Ue(e,"hide"),e.done&&Me(e)}))}function ze(e,t){return e.done?1:t.done?-1:Number(t.priority)-Number(e.priority)}qe()(We.Z,{insert:"head",singleton:!1}),We.Z.locals,function(){document.getElementById("content");const e=document.createElement("button");e.innerHTML='<i class="las la-folder-plus"></i><span> New Project</span>',e.setAttribute("id","addnewproject"),document.getElementById("info").appendChild(e),0===window.localStorage.length&&Ie("default"),e.addEventListener("click",(function(){Ie(null)}))}(),function(){const e=window.localStorage;if(1===e.length){const t=e.getItem(e.key(0));if(0===JSON.parse(t).items.length)return}if(0!=e.length){let t,n;for(let r=0;r<e.length;r++){const i=e.getItem(e.key(r)),o=JSON.parse(i).items;t=ye(o,t),n=ve(o,n)}void 0!==t&&"1"!==t.priority&&ke(t,"priority"),void 0!==n&&""!==n.dueDate&&ke(n,"duedate")}}();const Xe=document.querySelector("footer"),Ze=document.createElement("p");Ze.innerHTML='<a href="https://github.com/paposeco/" alt="github"><span><i class="lab la-github"></i></span>Fabi</a>',Xe.appendChild(Ze)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvbGlzdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG9saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvY3JlYXRlUHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL2NyZWF0ZVRvRG8uanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2NvbXBhcmVBc2MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlSVNPL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL2luZm8uanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvZG9tdGhpbmdzLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL3N0eWxlLmNzcz83MTYzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJwcm9qZWN0Q3JlYXRvciIsInRpdGxlIiwiaXRlbXMiLCJjcmVhdGVQcm9qZWN0IiwicHJvamVjdHNDcmVhdGVkIiwiYWRkSXRlbVRvUHJvamVjdFN0b3JhZ2UiLCJwcm9qZWN0Iiwic3RvcmVkSXRlbXMiLCJsb2NhbFN0b3JhZ2UiLCJjdXJyZW50UHJvamVjdEpzb24iLCJnZXRJdGVtIiwiY3VycmVudFByb2plY3QiLCJwYXJzZSIsImN1cnJlbnRQcm9qZWN0QmFja1RvSnNvbiIsInNldEl0ZW0iLCJyZW1vdmVJdGVtRnJvbVByb2plY3QiLCJjdXJyZW50UHJvamVjdFN0b3JhZ2UiLCJjdXJyZW50UHJvamVjdEl0ZW1BcnJheUluU3RvcmFnZSIsImN1cnJlbnRQcm9qZWN0SXRlbUFycmF5IiwiaXRlbVRvQmVEZWxldGVkIiwiaXRlbUlEIiwiaiIsImpzb25TdHJpbmdpZnkiLCJwcm9qZWN0Q29sbGVjdGlvbiIsIm5ld1Byb2plY3QiLCJqc29uU3RyaW5nIiwicHJvamVjdEZvclN0b3JhZ2UiLCJjcmVhdGVOZXdQcm9qZWN0IiwiYWRkSXRlbVRvUHJvamVjdCIsInVwZGF0ZVByb2plY3RBcnJheSIsImFycmF5IiwiZWRpdEl0ZW1JblByb2plY3QiLCJjdXJyZW50SXRlbSIsInByb2plY3RJblN0b3JhZ2UiLCJwcm9qZWN0SW5TdG9yYWdlUGFyc2VkIiwicHJvamVjdEl0ZW1zQXJyYXkiLCJwcmVwYXJlUHJvamVjdEZvclN0b3JhZ2UiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJzdGFjayIsIk5hTiIsImlzVmFsaWQiLCJkaXJ0eURhdGUiLCJkYXRlIiwiaXNOYU4iLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJkaXJ0eU9wdGlvbnMiLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmb3JtYXRMb25nIiwiZnVsbCIsImxvbmciLCJtZWRpdW0iLCJzaG9ydCIsInRpbWUiLCJkYXRlVGltZSIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwidmFsdWVzQXJyYXkiLCJjb250ZXh0IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsImRpcnR5U3RyaW5nIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJvYmplY3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsInJlcGxhY2UiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsIl9vcHRpb25zIiwibG9jYWxpemUiLCJvcmRpbmFsTnVtYmVyIiwiZGlydHlOdW1iZXIiLCJfZGlydHlPcHRpb25zIiwibnVtYmVyIiwiTnVtYmVyIiwicmVtMTAwIiwiZXJhIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwicXVhcnRlciIsIm1vbnRoIiwiZGF5IiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55Iiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwidG9JbnRlZ2VyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsInNpZ25lZFllYXIiLCJnZXRVVENGdWxsWWVhciIsInllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwb3ciLCJNSUxMSVNFQ09ORFNfSU5fREFZIiwic3RhcnRPZlVUQ0lTT1dlZWsiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsInNldFVUQ0hvdXJzIiwiZ2V0VVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5IiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJzdGFydE9mVVRDV2VlayIsImxvY2FsZSIsImxvY2FsZVdlZWtTdGFydHNPbiIsImRlZmF1bHRXZWVrU3RhcnRzT24iLCJSYW5nZUVycm9yIiwiZ2V0VVRDV2Vla1llYXIiLCJsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUiLCJkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJmaXJzdFdlZWsiLCJmb3JtYXRUaW1lem9uZVNob3J0Iiwib2Zmc2V0IiwiZGlydHlEZWxpbWl0ZXIiLCJhYnNPZmZzZXQiLCJob3VycyIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIkciLCJ5IiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJEIiwiZGF5T2ZZZWFyIiwic2V0VVRDTW9udGgiLCJzdGFydE9mWWVhclRpbWVzdGFtcCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaXNvRGF5T2ZXZWVrIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwidG9Mb3dlckNhc2UiLCJiIiwiQiIsImgiLCJIIiwiSyIsImsiLCJtIiwicyIsIlMiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ4IiwiTyIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsInRpbWVMb25nRm9ybWF0dGVyIiwicCIsIlAiLCJkYXRlVGltZUZvcm1hdCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsImluZGV4T2YiLCJpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4iLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwiZm9ybWF0IiwiaW5wdXQiLCJmb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwibG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJlc2NhcGVkU3RyaW5nUmVnRXhwIiwiZG91YmxlUXVvdGVSZWdFeHAiLCJ1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCIsImNsZWFuRXNjYXBlZFN0cmluZyIsImNyZWF0aW9uVGltZSIsImRpcnR5Rm9ybWF0U3RyIiwiZm9ybWF0U3RyIiwiZm9ybWF0dGVyT3B0aW9ucyIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJub3ciLCJ0b0RvQ3JlYXRlciIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwiY3JlYXRpb25EYXRlIiwibm90ZXMiLCJ1cmwiLCJjaGVja0xpc3QiLCJpdGVtTnVtYmVySW5Qcm9qZWN0IiwiY3JlYXRlQ2hlY2tMaXN0T2JqZWN0IiwiY2hlY2tMaXN0QXJyYXkiLCJzcGxpdCIsImNsZWFuU3RyaW5nIiwidHJpbSIsIm9iaktleSIsIm9iaktleVN0YXR1cyIsImNyZWF0ZUxpc3QiLCJpdGVtTGlzdCIsInVwZGF0ZUl0ZW1MaXN0IiwibmV3bGlzdCIsImFkZG9ycmVtb3ZlIiwicmVtb3ZlSXRlbUZyb21MaXN0IiwiY3JlYXRlTmV3SXRlbSIsImN1cnJlbnRUaW1lIiwibmV3SXRlbSIsInJlbW92ZUFsbEl0ZW1zRnJvbVByb2plY3QiLCJjdXJyZW50aXRlbXMiLCJyZXRyaWV2ZUl0ZW0iLCJjb21wYXJlQXNjIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnQiLCJkYXRlUmlnaHQiLCJNSUxMSVNFQ09ORFNfSU5fSE9VUiIsInBhdHRlcm5zIiwiZGF0ZVRpbWVEZWxpbWl0ZXIiLCJ0aW1lWm9uZURlbGltaXRlciIsInRpbWV6b25lIiwiZGF0ZVJlZ2V4IiwidGltZVJlZ2V4IiwidGltZXpvbmVSZWdleCIsInBhcnNlSVNPIiwiYWRkaXRpb25hbERpZ2l0cyIsImRhdGVTdHJpbmdzIiwic3BsaXREYXRlU3RyaW5nIiwicGFyc2VZZWFyUmVzdWx0IiwicGFyc2VZZWFyIiwicGFyc2VEYXRlIiwicmVzdERhdGVTdHJpbmciLCJwYXJzZVRpbWUiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwicGFyc2VUaW1lem9uZSIsImRhdGVTdHJpbmciLCJ0aW1lU3RyaW5nIiwic3Vic3RyIiwiZXhlYyIsInJlZ2V4IiwiUmVnRXhwIiwiY2FwdHVyZXMiLCJjZW50dXJ5IiwiaXNXZWVrRGF0ZSIsInBhcnNlRGF0ZVVuaXQiLCJfeWVhciIsInZhbGlkYXRlV2Vla0RhdGUiLCJpc29XZWVrWWVhciIsImRheU9mSVNPV2Vla1llYXIiLCJkYXlzSW5Nb250aHMiLCJpc0xlYXBZZWFySW5kZXgiLCJ2YWxpZGF0ZURhdGUiLCJ2YWxpZGF0ZURheU9mWWVhckRhdGUiLCJtYXgiLCJwYXJzZVRpbWVVbml0Iiwic2Vjb25kcyIsInZhbGlkYXRlVGltZSIsInBhcnNlRmxvYXQiLCJ0aW1lem9uZVN0cmluZyIsIl9ob3VycyIsInZhbGlkYXRlVGltZXpvbmUiLCJoaWdoZXN0UHJpb3JpdHkiLCJvYmpIIiwib2JqSGlnaGVzdCIsImhpZ2hlc3RQcmlvcml0eVNpbmdsZSIsImNsb3Nlc3REdWVEYXRlIiwib2JqRCIsImNsb3Nlc3QiLCJjbG9zZXN0RHVlRGF0ZVNpbmdsZSIsIm9iakNsb3Nlc3QiLCJvbkFkZENoZWNrRm9yQ2hhbmdlc09uSW5mbyIsIm9ialByaW9yaXR5Iiwib2JqRGF0ZSIsImFkZEluZm9Ub0RvbSIsIm9iaklEIiwiZ2V0QXR0cmlidXRlIiwiY3VycmVudEl0ZW1MaXN0IiwiaGlnaGVzdHByaW9yaXR5b2JqIiwiY3VycmVudGl0ZW0iLCJuZWFyZXN0ZHVlZGF0ZW9iaiIsImNoYW5nZUl0ZW1PbkluZm8iLCJ0eXBlIiwicHJpb3JpdHlEaXYiLCJvYmpEdWVEYXRlIiwiZHVlZGF0ZURpdiIsImluZm9EaXYiLCJnZXRFbGVtZW50QnlJZCIsImluZm9Qcmlvcml0eSIsImluZm9EYXRlIiwidGV4dENvbnRlbnQiLCJoYXNDaGlsZE5vZGVzIiwiYWRkSXRlbVRvRG9tU2ltcGxpZmllZCIsImFkZFByb2plY3QiLCJkaXZDb250ZW50IiwiZGl2cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsYXJnZXN0SUQiLCJwcm9qZWN0TnVtYmVyIiwibnVtYmVyT2ZQcm9qZWN0cyIsImNyZWF0ZURpdiIsInByb2plY3RUaXRsZSIsInByb2plY3ROYW1lIiwicHJvbXB0IiwicHJvamVjdEhlYWRlciIsImNsb3NlcHJvamVjdCIsInRpdGxlUGFyYSIsInByb2plY3REaXYiLCJidXR0b24iLCJidXR0b25uYW1lIiwiaW5uZXJIVE1MIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZvcm1EaXZBbHJlYWR5RXhpc3RzIiwiYWRkSXRlbUZvcm0iLCJ0aXRsZUZvcm0iLCJmb2N1cyIsInByZXZlbnREZWZhdWx0IiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsIml0ZW1JbmZvIiwicGFpciIsImVudHJpZXMiLCJpdGVtRGl2RXhpc3RpbmciLCJoaWdoZXN0SXRlbU51bWJlciIsImlkY29tcGxldGUiLCJpdGVtd29yZCIsImxhc3RJbmRleE9mIiwibmV3aXRlbSIsImFkZEl0ZW1Ub0RvbSIsImZvcm1IYW5kbGVyIiwiYWRkSXRlbUJ1dHRvbiIsImNsb3NlcHJvamVjdGJ1dHRvbiIsInJlbW92ZVByb2plY3QiLCJyZW1vdmVQcm9qZWN0QnV0dG9uIiwicHJvamVjdFNvcnRCdXR0b25QIiwib3JkZXJUYXNrc1AiLCJwcm9qZWN0U29ydEJ1dHRvbkQiLCJvcmRlclRhc2tzRCIsInByb2plY3RFeHBhbmRBbGwiLCJjbGFzc0xpc3QiLCJhZGQiLCJldmVudCIsImNsaWNrZWRwcm9qZWN0IiwiY3VycmVudFRhcmdldCIsIml0ZW1hcnJheSIsImNvbnRhaW5zIiwic2hvd09ySGlkZURpdnMiLCJwcm9qZWN0SUQiLCJkaXYiLCJpdGVtSGVhZGVyRGl2IiwiaXRlbVRpdGxlRGl2IiwiaXRlbUV4cGFuZERpdiIsIml0ZW1TdGF0dXNEaXYiLCJpdGVtRGVzY3JpcHRpb25EaXYiLCJpdGVtRHVlRGF0ZURpdiIsIml0ZW1Qcmlvcml0eURpdiIsIml0ZW1Ob3Rlc0RpdiIsIml0ZW1VcmxEaXYiLCJpdGVtQ2hlY2tMaXN0RGl2IiwiY2xhc3NlcyIsIml0ZW1UaXRsZSIsIml0ZW1FeHBhbmQiLCJpdGVtU3RhdHVzIiwiaXRlbVN0YXR1c1NwYW4iLCJpdGVtRGVzY3JpcHRpb24iLCJpdGVtRHVlRGF0ZSIsIml0ZW1Qcmlvcml0eSIsIml0ZW1Ob3RlcyIsIml0ZW1VcmxQYXJhIiwiaXRlbVVybEEiLCJpdGVtQ2hlY2tMaXN0IiwidWwiLCJsaSIsIm1hcmtUYXNrQ29tcGxldGUiLCJtYWtlTGlzdEZyb21JbnB1dCIsIml0ZW1DaGVja0xpc3RUaXRsZSIsInRhc2tzIiwiY291bnRUYXNrcyIsImRpc3BsYXkiLCJkaXZDaGlsZHJlbiIsImNyZWF0ZURvbUVsZW1lbnRzIiwib2JqQ2hlY2tMaXN0IiwibGlJZCIsIm1hcmtBbGxUYXNrc0NvbXBsZXRlIiwic3R5bGVJdGVtIiwiaW5mb0RpdlAiLCJpbmZvRGl2RCIsImxvZyIsIm1hcmtJdGVtQXNEb25lIiwiaXRlbUZvb3RlciIsInJlbW92ZUl0ZW1CdXQiLCJyZW1vdmVJdGVtQnV0dG9uIiwiZm9vdGVyRGl2IiwiaXRlbURpdiIsImVkaXRJdGVtQnV0IiwiY3VycmVudERpdiIsImlucHV0VGl0bGUiLCJpbnB1dERlc2NyaXB0aW9uIiwiaW5wdXREdWVEYXRlIiwiaW5wdXRQcmlvcml0eSIsImlucHV0Tm90ZXMiLCJpbnB1dFVybCIsImlucHV0Q2hlY2tMaXN0IiwidGFzayIsInJlcGxhY2VBbGwiLCJyZXBsYWNlQ2hpbGRyZW4iLCJJRCIsImN1cnJlbnRGb3JtIiwiZm9ybUhhbmRsZXJFZGl0IiwiZWRpdEl0ZW0iLCJhbGVydCIsImVkaXRJdGVtQnV0dG9uIiwibW92ZUFkZEJ1dHRvbiIsIm5ld29yZWRpdCIsImZvcm1EaXYiLCJmb3JtIiwiZm9ybUlEIiwiZGl2MSIsImxhYmVsMSIsImlucHV0MSIsImRpdjIiLCJsYWJlbDIiLCJpbnB1dDIiLCJkaXYzIiwibGFiZWwzIiwiaW5wdXQzIiwiZGl2NCIsImxhYmVsNCIsImlucHV0NCIsIm5ld1NlbGVjdE9wdGlvbiIsImRpdjUiLCJsYWJlbDUiLCJpbnB1dDUiLCJyZXNpemUiLCJkaXY5IiwibGFiZWw5IiwiaW5wdXQ5IiwiZGl2NiIsImxhYmVsNiIsImlucHV0NiIsImlucHV0cyIsImxhYmVscyIsImRpdjciLCJkaXY4IiwiZm9ybWZvb3RlciIsImlucHV0NyIsImlucHV0OCIsImRpdklEIiwiY3VycmVudFByb2plY3RBcnJheSIsInVwZGF0ZWRQcm9qZWN0c0NyZWF0ZWQiLCJzdG9yZWRJdGVtS2V5IiwicmVtb3ZlSXRlbSIsIml0ZW1TdGF0dXNEaXZQIiwiaXRlbVN0YXR1c0RpdlNwYW4iLCJmdWxsY2hlY2tsaXN0IiwiY2hlY2tsaXN0YXJyYXkiLCJjb21wbGV0ZWR0YXNrcyIsInRvdGFsdGFza3MiLCJlbGVtZW50Iiwic2hvd29yaGlkZSIsIml0ZW1kaXYiLCJzdGF0dXMiLCJleHBhbmQiLCJvbmxvYWQiLCJzb3J0IiwicHJvamVjdEl0ZW1zIiwicmV0cmlldmVJdGVtc0Zyb21TdG9yYWdlIiwicHJvamVjdERpdklkIiwiaXRlbWRpdnMiLCJjb21wbGV0ZUxpc3RUYXNrcyIsInRhc2tJblByb2plY3QiLCJjb21wYXJlRGF0ZSIsImNvbXBhcmVQcmlvcml0eSIsImFkZFByb2plY3RCdXR0b24iLCJtYW5hZ2VEb20iLCJwcm9qZWN0c3RvcmVkIiwicHJv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QW1ELEtBQXZCQSxFQUFXbkcsU0FDekN5RixHQUFhVSxFQUFZLFlFNUwvQmlNLEdBeUVBLE1BQU1yRixHQUFZbG1CLFNBQVNDLGNBQWMsVUFDbkN1ckIsR0FBT3hyQixTQUFTMkIsY0FBYyxLQUNwQzZwQixHQUFLeEssVUFDSCx5R0FDRmtGLEdBQVU5akIsWUFBWW9wQixLIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMTBweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSBOZXVlLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxuICBtaW4taGVpZ2h0OiA5OHZoO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbiNjb250ZW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZ2FwOiAxNXB4O1xcbn1cXG5cXG5mb290ZXIge1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG5cXG5mb290ZXIgcCB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMC43NXR1cm4pO1xcbiAgd2lkdGg6IG1heC1jb250ZW50O1xcbn1cXG5cXG5idXR0b24sXFxuaW5wdXRbdHlwZT1cXFwiYnV0dG9uXFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwic3VibWl0XFxcIl0sXFxuc2VsZWN0IHtcXG4gIGJvcmRlcjogMXB4IGJsYWNrIHNvbGlkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbnNlbGVjdCB7XFxuICB3aWR0aDogNDBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XFxufVxcblxcbmJ1dHRvbjpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5yZW1vdmVJdGVtLFxcbi5lZGl0SXRlbSxcXG4ucmVtb3ZlUHJvamVjdCxcXG4uZXhwYW5kYWxsIHtcXG4gIGhlaWdodDogMjVweDtcXG4gIHdpZHRoOiAyNXB4O1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG59XFxuXFxuLnJlbW92ZVByb2plY3QsXFxuLnNvcnRQcm9qZWN0LFxcbi5leHBhbmRhbGwsXFxuLmNsb3NlUHJvamVjdCB7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcblxcbi5leHBhbmRhbGwsXFxuLmNsb3NlUHJvamVjdCB7XFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5jbG9zZVByb2plY3Qge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnNvcnRQcm9qZWN0IHtcXG4gIGhlaWdodDogMjVweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBwYWRkaW5nLXJpZ2h0OiAycHg7XFxufVxcblxcbiNhZGRuZXdwcm9qZWN0IHtcXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLmFkZEl0ZW0ge1xcbiAgaGVpZ2h0OiAyNXB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4ucHJvamVjdERpdiB7XFxuICB3aWR0aDogMzAwcHg7XFxuICBmbGV4LXNocmluazogMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAxMHB4O1xcbiAgYm9yZGVyOiAxcHggZ3JleSBzb2xpZDtcXG4gIHBhZGRpbmc6IDNweCAxMHB4IDEwcHggMTBweDtcXG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxuICBib3gtc2hhZG93OiAwIDAgMCAycHggd2hpdGUsIDAgMCAwIDNweCBsaWdodGdyZXk7XFxufVxcblxcbiNpbmZvIHtcXG4gIHdpZHRoOiAyNTBweDtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDEwcHg7XFxuICBwYWRkaW5nOiAwcHggMTBweCAxMHB4IDEwcHg7XFxuICBoZWlnaHQ6IG1heC1jb250ZW50O1xcbn1cXG5cXG4ucHJvamVjdERpdiA+IGRpdixcXG4uaW5mb1ByaW9yaXR5ID4gZGl2LFxcbi5pbmZvRGF0ZSA+IGRpdiB7XFxuICBwYWRkaW5nOiAwcHggMTBweCAxMHB4IDEwcHg7XFxufVxcblxcbi5jbG9zZXByb2plY3RkaXYge1xcbiAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5pdGVtRGl2IHtcXG4gIGJvcmRlcjogMXB4IGRvdHRlZCBsaWdodGdyZXk7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxufVxcblxcbi5wcm9qZWN0RGl2IGg0IHtcXG4gIG1hcmdpbi1ib3R0b206IDBweDtcXG59XFxuXFxuLnN0YXR1c1NwYW4ge1xcbiAgd2lkdGg6IDEwcHg7XFxuICBoZWlnaHQ6IDEwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogc29saWQgMXB4IGJsYWNrO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbi1sZWZ0OiA1cHg7XFxufVxcblxcbi5zdGF0dXNTcGFuOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnN0YXR1c1NwYW5Db21wbGV0ZSB7XFxuICB3aWR0aDogMjVweDtcXG4gIGhlaWdodDogMjVweDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIG1hcmdpbi1sZWZ0OiA1cHg7XFxufVxcblxcbi5wcm9qZWN0SGVhZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMnB4O1xcbiAgcGFkZGluZzogMHB4IDBweCAwcHggM3B4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5wcm9qZWN0SGVhZGVyID4gaDIge1xcbiAgbWFyZ2luLXRvcDogMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMHB4O1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG5cXG4ucHJvamVjdEhlYWRlciA+IGJ1dHRvbiB7XFxuICBmbGV4LXNocmluazogMDtcXG59XFxuXFxuLmZvcm1EaXYge1xcbiAgcGFkZGluZy1ib3R0b206IDBweCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXRlbUZvb3RlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcblxcbi5pdGVtSGVhZGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxubGFiZWxbZm9yPVxcXCJjaGVja0xpc3RcXFwiXTphZnRlciB7XFxuICBjb250ZW50OiBcXFwiU2VwYXJhdGUgbGlzdCBpdGVtcyB3aXRoICc7J1xcXCI7XFxuICBmb250LXNpemU6IDEycHg7XFxufVxcblxcbmxhYmVsW2Zvcj1cXFwidGl0bGVcXFwiXTphZnRlciB7XFxuICBjb250ZW50OiBcXFwiICgqcmVxdWlyZWQpXFxcIjtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG59XFxuXFxudWwge1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbn1cXG5cXG51bCBsaSB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4udGFza05vdENvbXBsZXRlOmJlZm9yZSB7XFxuICBmb250LWZhbWlseTogXFxcIkxpbmUgQXdlc29tZSBGcmVlXFxcIjtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRjA0RFxcXCI7XFxuICBjb2xvcjogYmxhY2s7XFxuICBmb250LXdlaWdodDogOTAwO1xcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xcbiAgcGFkZGluZy1yaWdodDogMTBweDtcXG59XFxuXFxuLnRhc2tOb3RDb21wbGV0ZTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmxpLnRhc2tDb21wbGV0ZSB7XFxuICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcXG59XFxuXFxubGkudGFza0NvbXBsZXRlOmJlZm9yZSB7XFxuICBmb250LWZhbWlseTogXFxcIkxpbmUgQXdlc29tZSBGcmVlXFxcIjtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRjE0QVxcXCI7XFxuICBjb2xvcjogYmxhY2s7XFxuICBmb250LXdlaWdodDogOTAwO1xcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xcbiAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLnByaW9yaXR5NSBpIHtcXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjY2JjO1xcbn1cXG5cXG4ucHJpb3JpdHkzIGksXFxuLnByaW9yaXR5NCBpIHtcXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOWM0O1xcbn1cXG5cXG4ucHJpb3JpdHkxIGksXFxuLnByaW9yaXR5MiBpIHtcXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGNlZGM4O1xcbn1cXG5cXG4uaXRlbUNoZWNrTGlzdCBwIHtcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG59XFxuXFxuLml0ZW1FeHBhbmQsXFxuLml0ZW1FeHBhbmQgPiBwIHtcXG4gIG1hcmdpbjogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiBsaWdodGdyZXk7XFxufVxcblxcbi5pdGVtRXhwYW5kOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiBibGFjaztcXG59XFxuXFxuLml0ZW1UaXRsZSB7XFxuICBtYXgtd2lkdGg6IDg3JTtcXG59XFxuLml0ZW1UaXRsZSA+IGgzIHtcXG4gIG1hcmdpbi1ib3R0b206IDBweDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi5pdGVtUHJpb3JpdHkge1xcbiAgZmxleC1zaHJpbms6IDA7XFxufVxcblxcbi5pdGVtUHJpb3JpdHkgPiBwIHtcXG4gIG1hcmdpbi1ib3R0b206IDBweDtcXG59XFxuXFxuLmNsb3NlcHJvamVjdGRpdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInRleHRcXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJ1cmxcXFwiXSB7XFxuICB3aWR0aDogOTclO1xcbiAgYm9yZGVyOiAxcHggc29saWQgZ3JleTtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5mb3JtTmV3SXRlbSB7XFxuICBtYXJnaW46IDVweCAwO1xcbn1cXG5cXG4uZm9ybWZvb3RlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZ2FwOiAyMHB4O1xcbn1cXG5cXG4uZm9ybWZvb3RlciBpbnB1dCB7XFxuICB3aWR0aDogODBweDtcXG59XFxuXFxudGV4dGFyZWEge1xcbiAgaGVpZ2h0OiAxMDBweDtcXG4gIHdpZHRoOiA5NyU7XFxufVxcblxcbmlucHV0OmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbmEge1xcbiAgY29sb3I6ICM3MGMyZDg7XFxufVxcblxcbmE6dmlzaXRlZCB7XFxuICBjb2xvcjogIzM4NjE2YztcXG59XFxuXFxuYTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQxNHB4KSB7XFxuICAjY29udGVudCB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxuICBmb290ZXIgcCB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgdHJhbnNmb3JtOiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5wcm9qZWN0RGl2IHtcXG4gICAgd2lkdGg6IDk0JTtcXG4gIH1cXG4gICNpbmZvIHtcXG4gICAgd2lkdGg6IDgwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgfVxcbiAgaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdLFxcbiAgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdLFxcbiAgaW5wdXRbdHlwZT1cXFwidXJsXFxcIl0sXFxuICBzZWxlY3Q6Zm9jdXMsXFxuICB0ZXh0YXJlYSB7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDE1cHgpIGFuZCAobWF4LXdpZHRoOiA4MDBweCkge1xcbiAgI2NvbnRlbnQge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG4gIC5wcm9qZWN0RGl2IHtcXG4gICAgd2lkdGg6IDk3JTtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB9XFxuICAuY2xvc2Vwcm9qZWN0ZGl2IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuICAuaXRlbURpdiB7XFxuICAgIHdpZHRoOiA0NSU7XFxuICB9XFxuICAucHJvamVjdEhlYWRlciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgI2luZm8ge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICB3aWR0aDogOTclO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gIH1cXG4gICNpbmZvIGgzIHtcXG4gICAgbWFyZ2luLXRvcDogMHB4O1xcbiAgfVxcbiAgI2luZm8gYnV0dG9uIHtcXG4gICAgaGVpZ2h0OiBtYXgtY29udGVudDtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbiAgfVxcbiAgI2luZm8gPiBkaXYge1xcbiAgICB3aWR0aDogMjUwcHg7XFxuICB9XFxuICBmb290ZXIgcCB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgdHJhbnNmb3JtOiBub25lO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5pbmZvRGF0ZSxcXG4gIC5pbmZvUHJpb3JpdHkge1xcbiAgICB3aWR0aDogMjAwcHg7XFxuICB9XFxuXFxuICAjY2xvc2VzdGR1ZWRhdGUge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZy1sZWZ0OiAwcHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDBweDtcXG4gIH1cXG4gICNjbG9zZXN0ZHVlZGF0ZSA+IGRpdiB7XFxuICAgIHBhZGRpbmctbGVmdDogMTBweDtcXG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gIH1cXG5cXG4gICNoaWdoZXN0UHJpb3JpdHkge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZy1sZWZ0OiAwcHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDBweDtcXG4gIH1cXG4gICNoaWdoZXN0UHJpb3JpdHkgPiBkaXYge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxuICB9XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxVQUFVO0VBQ1YsWUFBWTtFQUNaLHNCQUFzQjtFQUN0Qix5REFBeUQ7RUFDekQsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQiwyQkFBMkI7RUFDM0Isa0JBQWtCO0FBQ3BCOztBQUVBOzs7O0VBSUUsdUJBQXVCO0VBQ3ZCLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTs7OztFQUlFLFlBQVk7RUFDWixXQUFXO0VBQ1gsVUFBVTtFQUNWLGVBQWU7QUFDakI7O0FBRUE7Ozs7RUFJRSxZ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IHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDEwcHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EgTmV1ZSwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgbWluLWhlaWdodDogOTh2aDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4jY29udGVudCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGdhcDogMTVweDtcXG59XFxuXFxuZm9vdGVyIHtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG59XFxuXFxuZm9vdGVyIHAge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDAuNzV0dXJuKTtcXG4gIHdpZHRoOiBtYXgtY29udGVudDtcXG59XFxuXFxuYnV0dG9uLFxcbmlucHV0W3R5cGU9XFxcImJ1dHRvblxcXCJdLFxcbmlucHV0W3R5cGU9XFxcInN1Ym1pdFxcXCJdLFxcbnNlbGVjdCB7XFxuICBib3JkZXI6IDFweCBibGFjayBzb2xpZDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG5zZWxlY3Qge1xcbiAgd2lkdGg6IDQwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXI6IDFweCBzb2xpZCBncmV5O1xcbn1cXG5cXG5idXR0b246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucmVtb3ZlSXRlbSxcXG4uZWRpdEl0ZW0sXFxuLnJlbW92ZVByb2plY3QsXFxuLmV4cGFuZGFsbCB7XFxuICBoZWlnaHQ6IDI1cHg7XFxuICB3aWR0aDogMjVweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LXNpemU6IDIwcHg7XFxufVxcblxcbi5yZW1vdmVQcm9qZWN0LFxcbi5zb3J0UHJvamVjdCxcXG4uZXhwYW5kYWxsLFxcbi5jbG9zZVByb2plY3Qge1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG5cXG4uZXhwYW5kYWxsLFxcbi5jbG9zZVByb2plY3Qge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4uY2xvc2VQcm9qZWN0IHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5zb3J0UHJvamVjdCB7XFxuICBoZWlnaHQ6IDI1cHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgcGFkZGluZy1yaWdodDogMnB4O1xcbn1cXG5cXG4jYWRkbmV3cHJvamVjdCB7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5hZGRJdGVtIHtcXG4gIGhlaWdodDogMjVweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLnByb2plY3REaXYge1xcbiAgd2lkdGg6IDMwMHB4O1xcbiAgZmxleC1zaHJpbms6IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMTBweDtcXG4gIGJvcmRlcjogMXB4IGdyZXkgc29saWQ7XFxuICBwYWRkaW5nOiAzcHggMTBweCAxMHB4IDEwcHg7XFxuICBoZWlnaHQ6IG1heC1jb250ZW50O1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHdoaXRlLCAwIDAgMCAzcHggbGlnaHRncmV5O1xcbn1cXG5cXG4jaW5mbyB7XFxuICB3aWR0aDogMjUwcHg7XFxuICBmbGV4LXNocmluazogMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAxMHB4O1xcbiAgcGFkZGluZzogMHB4IDEwcHggMTBweCAxMHB4O1xcbiAgaGVpZ2h0OiBtYXgtY29udGVudDtcXG59XFxuXFxuLnByb2plY3REaXYgPiBkaXYsXFxuLmluZm9Qcmlvcml0eSA+IGRpdixcXG4uaW5mb0RhdGUgPiBkaXYge1xcbiAgcGFkZGluZzogMHB4IDEwcHggMTBweCAxMHB4O1xcbn1cXG5cXG4uY2xvc2Vwcm9qZWN0ZGl2IHtcXG4gIHBhZGRpbmc6IDBweCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaXRlbURpdiB7XFxuICBib3JkZXI6IDFweCBkb3R0ZWQgbGlnaHRncmV5O1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ucHJvamVjdERpdiBoNCB7XFxuICBtYXJnaW4tYm90dG9tOiAwcHg7XFxufVxcblxcbi5zdGF0dXNTcGFuIHtcXG4gIHdpZHRoOiAxMHB4O1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXI6IHNvbGlkIDFweCBibGFjaztcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbn1cXG5cXG4uc3RhdHVzU3Bhbjpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zdGF0dXNTcGFuQ29tcGxldGUge1xcbiAgd2lkdGg6IDI1cHg7XFxuICBoZWlnaHQ6IDI1cHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbn1cXG5cXG4ucHJvamVjdEhlYWRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDJweDtcXG4gIHBhZGRpbmc6IDBweCAwcHggMHB4IDNweCAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucHJvamVjdEhlYWRlciA+IGgyIHtcXG4gIG1hcmdpbi10b3A6IDBweDtcXG4gIG1hcmdpbi1ib3R0b206IDBweDtcXG4gIGZsZXgtZ3JvdzogMTtcXG59XFxuXFxuLnByb2plY3RIZWFkZXIgPiBidXR0b24ge1xcbiAgZmxleC1zaHJpbms6IDA7XFxufVxcblxcbi5mb3JtRGl2IHtcXG4gIHBhZGRpbmctYm90dG9tOiAwcHggIWltcG9ydGFudDtcXG59XFxuXFxuLml0ZW1Gb290ZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG5cXG4uaXRlbUhlYWRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbmxhYmVsW2Zvcj1cXFwiY2hlY2tMaXN0XFxcIl06YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlNlcGFyYXRlIGxpc3QgaXRlbXMgd2l0aCAnOydcXFwiO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbn1cXG5cXG5sYWJlbFtmb3I9XFxcInRpdGxlXFxcIl06YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIiAoKnJlcXVpcmVkKVxcXCI7XFxuICBmb250LXNpemU6IDEycHg7XFxufVxcblxcbnVsIHtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG59XFxuXFxudWwgbGkge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuLnRhc2tOb3RDb21wbGV0ZTpiZWZvcmUge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJMaW5lIEF3ZXNvbWUgRnJlZVxcXCI7XFxuICBjb250ZW50OiBcXFwiXFxcXEYwNERcXFwiO1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gIHBhZGRpbmctbGVmdDogMTVweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcblxcbi50YXNrTm90Q29tcGxldGU6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5saS50YXNrQ29tcGxldGUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxufVxcblxcbmxpLnRhc2tDb21wbGV0ZTpiZWZvcmUge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJMaW5lIEF3ZXNvbWUgRnJlZVxcXCI7XFxuICBjb250ZW50OiBcXFwiXFxcXEYxNEFcXFwiO1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gIHBhZGRpbmctbGVmdDogMTVweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5wcmlvcml0eTUgaSB7XFxuICBib3JkZXItcmFkaXVzOiAyNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmY2NiYztcXG59XFxuXFxuLnByaW9yaXR5MyBpLFxcbi5wcmlvcml0eTQgaSB7XFxuICBib3JkZXItcmFkaXVzOiAyNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjljNDtcXG59XFxuXFxuLnByaW9yaXR5MSBpLFxcbi5wcmlvcml0eTIgaSB7XFxuICBib3JkZXItcmFkaXVzOiAyNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RjZWRjODtcXG59XFxuXFxuLml0ZW1DaGVja0xpc3QgcCB7XFxuICBtYXJnaW4tYm90dG9tOiA1cHg7XFxufVxcblxcbi5pdGVtRXhwYW5kLFxcbi5pdGVtRXhwYW5kID4gcCB7XFxuICBtYXJnaW46IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjb2xvcjogbGlnaHRncmV5O1xcbn1cXG5cXG4uaXRlbUV4cGFuZDpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5pdGVtVGl0bGUge1xcbiAgbWF4LXdpZHRoOiA4NyU7XFxufVxcbi5pdGVtVGl0bGUgPiBoMyB7XFxuICBtYXJnaW4tYm90dG9tOiAwcHg7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4uaXRlbVByaW9yaXR5IHtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbn1cXG5cXG4uaXRlbVByaW9yaXR5ID4gcCB7XFxuICBtYXJnaW4tYm90dG9tOiAwcHg7XFxufVxcblxcbi5jbG9zZXByb2plY3RkaXYge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwidXJsXFxcIl0ge1xcbiAgd2lkdGg6IDk3JTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcImRhdGVcXFwiXSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCBncmV5O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uZm9ybU5ld0l0ZW0ge1xcbiAgbWFyZ2luOiA1cHggMDtcXG59XFxuXFxuLmZvcm1mb290ZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGdhcDogMjBweDtcXG59XFxuXFxuLmZvcm1mb290ZXIgaW5wdXQge1xcbiAgd2lkdGg6IDgwcHg7XFxufVxcblxcbnRleHRhcmVhIHtcXG4gIGhlaWdodDogMTAwcHg7XFxuICB3aWR0aDogOTclO1xcbn1cXG5cXG5pbnB1dDpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG5hIHtcXG4gIGNvbG9yOiAjNzBjMmQ4O1xcbn1cXG5cXG5hOnZpc2l0ZWQge1xcbiAgY29sb3I6ICMzODYxNmM7XFxufVxcblxcbmE6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MTRweCkge1xcbiAgI2NvbnRlbnQge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgfVxcbiAgZm9vdGVyIHAge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHRyYW5zZm9ybTogbm9uZTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuICAucHJvamVjdERpdiB7XFxuICAgIHdpZHRoOiA5NCU7XFxuICB9XFxuICAjaW5mbyB7XFxuICAgIHdpZHRoOiA4MCU7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gIH1cXG4gIGlucHV0W3R5cGU9XFxcImRhdGVcXFwiXSxcXG4gIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSxcXG4gIGlucHV0W3R5cGU9XFxcInVybFxcXCJdLFxcbiAgc2VsZWN0OmZvY3VzLFxcbiAgdGV4dGFyZWEge1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICB9XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDQxNXB4KSBhbmQgKG1heC13aWR0aDogODAwcHgpIHtcXG4gICNjb250ZW50IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxuICAucHJvamVjdERpdiB7XFxuICAgIHdpZHRoOiA5NyU7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgfVxcbiAgLmNsb3NlcHJvamVjdGRpdiB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLml0ZW1EaXYge1xcbiAgICB3aWR0aDogNDUlO1xcbiAgfVxcbiAgLnByb2plY3RIZWFkZXIge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gICNpbmZvIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgd2lkdGg6IDk3JTtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICB9XFxuICAjaW5mbyBoMyB7XFxuICAgIG1hcmdpbi10b3A6IDBweDtcXG4gIH1cXG4gICNpbmZvIGJ1dHRvbiB7XFxuICAgIGhlaWdodDogbWF4LWNvbnRlbnQ7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gIH1cXG4gICNpbmZvID4gZGl2IHtcXG4gICAgd2lkdGg6IDI1MHB4O1xcbiAgfVxcbiAgZm9vdGVyIHAge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHRyYW5zZm9ybTogbm9uZTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuICAuaW5mb0RhdGUsXFxuICAuaW5mb1ByaW9yaXR5IHtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgfVxcblxcbiAgI2Nsb3Nlc3RkdWVkYXRlIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBhZGRpbmctbGVmdDogMHB4O1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwcHg7XFxuICB9XFxuICAjY2xvc2VzdGR1ZWRhdGUgPiBkaXYge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxuICB9XFxuXFxuICAjaGlnaGVzdFByaW9yaXR5IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBhZGRpbmctbGVmdDogMHB4O1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwcHg7XFxuICB9XFxuICAjaGlnaGVzdFByaW9yaXR5ID4gZGl2IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJleHBvcnQgeyBjcmVhdGVQcm9qZWN0IH07XG5cbi8vIGNvbnN0cnVjdG9yIGNsYXNzIGZvciBjcmVhdGluZyBwcm9qZWN0cy4gZWFjaCBwcm9qZWN0IGhhcyBhIHRpdGxlLCB1bmlxdWUgbmFtZSBhbmQgYW5kIGFycmF5IG9mIHRhc2tzKG9iamVjdHMpXG5jbGFzcyBwcm9qZWN0Q3JlYXRvciB7XG4gIGNvbnN0cnVjdG9yKHRpdGxlLCBuYW1lLCBpdGVtcykge1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgfVxufVxuXG4vLyBmdW5jdGlvbiBmYWN0b3J5IGZvciBwcm9qZWN0IGNyZWF0aW9uXG5jb25zdCBjcmVhdGVQcm9qZWN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgbGV0IHByb2plY3RzQ3JlYXRlZCA9IFtdO1xuXG4gIC8vY3JlYXRlcyBhIG5ldyBwcm9qZWN0IHdpdGggdGhlIGNvbnN0cnVjdG9yIHByb2plY3RjcmVhdG9yXG4gIGNvbnN0IGNyZWF0ZU5ld1Byb2plY3QgPSBmdW5jdGlvbiAodGl0bGUsIG5hbWUsIGl0ZW1zKSB7XG4gICAgLy9jaGVja3MgaWYgdGhlcmUgYXJlIFwicHJvamVjdHNcIiBpbiBzdG9yYWdlIGFuZCBjcmVhdGVzIGEgcHJvamVjdCBpZiB0aGVyZSBwcm9qZWN0IGRvZXNuJ3QgZXhpc3QgaW4gc3RvcmFnZVxuICAgIGNvbnN0IHN0b3JlZEl0ZW1zID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0b3JlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvYmpOYW1lID0gc3RvcmVkSXRlbXMua2V5KGkpO1xuICAgICAgaWYgKG9iak5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IHN0b3JlZEl0ZW1zLmdldEl0ZW0oc3RvcmVkSXRlbXMua2V5KGkpKTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgcHJvamVjdENyZWF0b3IodGl0bGUsIG5hbWUsIGl0ZW1zKTtcbiAgICAvLyBzYXZlcyBwcm9qZWN0IHRvIGxvY2FsIHN0b3JhZ2VcbiAgICBjb25zdCBwcm9qZWN0Rm9yU3RvcmFnZSA9IEpTT04uc3RyaW5naWZ5KG5ld1Byb2plY3QpO1xuICAgIHN0b3JlZEl0ZW1zLnNldEl0ZW0obmV3UHJvamVjdC5uYW1lLCBwcm9qZWN0Rm9yU3RvcmFnZSk7XG4gICAgcmV0dXJuIG5ld1Byb2plY3Q7XG4gIH07XG5cbiAgLy8gYWRkcyB0YXNrIHRvIHByb2plY3QgaW4gYXJyYXkgcHJvamVjdHMgY3JlYXRlZCwgYW5kIHNhdmVzIHRhc2sgdG8gbG9jYWwgc3RvcmFnZVxuICBjb25zdCBhZGRJdGVtVG9Qcm9qZWN0ID0gZnVuY3Rpb24gKHByb2plY3QsIGl0ZW0pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzQ3JlYXRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudFByb2plY3QgPSBwcm9qZWN0c0NyZWF0ZWRbaV07XG4gICAgICBpZiAoY3VycmVudFByb2plY3QubmFtZSA9PT0gcHJvamVjdCkge1xuICAgICAgICBsZXQgY3VycmVudFByb2plY3RJdGVtQXJyYXkgPSBjdXJyZW50UHJvamVjdC5pdGVtcztcbiAgICAgICAgY3VycmVudFByb2plY3RJdGVtQXJyYXkucHVzaChpdGVtKTtcbiAgICAgICAgYWRkSXRlbVRvUHJvamVjdFN0b3JhZ2UocHJvamVjdCwgaXRlbSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRJdGVtVG9Qcm9qZWN0U3RvcmFnZSA9IGZ1bmN0aW9uIChwcm9qZWN0LCBpdGVtKSB7XG4gICAgY29uc3Qgc3RvcmVkSXRlbXMgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0SnNvbiA9IHN0b3JlZEl0ZW1zLmdldEl0ZW0ocHJvamVjdCk7XG4gICAgY29uc3QgY3VycmVudFByb2plY3QgPSBKU09OLnBhcnNlKGN1cnJlbnRQcm9qZWN0SnNvbik7XG4gICAgY3VycmVudFByb2plY3QuaXRlbXMucHVzaChpdGVtKTtcbiAgICBjb25zdCBjdXJyZW50UHJvamVjdEJhY2tUb0pzb24gPSBKU09OLnN0cmluZ2lmeShjdXJyZW50UHJvamVjdCk7XG4gICAgc3RvcmVkSXRlbXMuc2V0SXRlbShwcm9qZWN0LCBjdXJyZW50UHJvamVjdEJhY2tUb0pzb24pO1xuICB9O1xuICBjb25zdCByZW1vdmVJdGVtRnJvbVByb2plY3QgPSBmdW5jdGlvbiAocHJvamVjdCwgaXRlbSkge1xuICAgIGxldCBzdG9yZWRJdGVtcyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgY29uc3QgY3VycmVudFByb2plY3RKc29uID0gc3RvcmVkSXRlbXMuZ2V0SXRlbShwcm9qZWN0KTtcbiAgICBsZXQgY3VycmVudFByb2plY3RTdG9yYWdlID0gSlNPTi5wYXJzZShjdXJyZW50UHJvamVjdEpzb24pO1xuICAgIGxldCBjdXJyZW50UHJvamVjdEl0ZW1BcnJheUluU3RvcmFnZSA9IGN1cnJlbnRQcm9qZWN0U3RvcmFnZS5pdGVtcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzQ3JlYXRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudFByb2plY3QgPSBwcm9qZWN0c0NyZWF0ZWRbaV07XG4gICAgICBpZiAoY3VycmVudFByb2plY3QubmFtZSA9PT0gcHJvamVjdCkge1xuICAgICAgICBsZXQgY3VycmVudFByb2plY3RJdGVtQXJyYXkgPSBjdXJyZW50UHJvamVjdC5pdGVtcztcbiAgICAgICAgY29uc3QgaXRlbVRvQmVEZWxldGVkID0gaXRlbS5pdGVtSUQ7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY3VycmVudFByb2plY3RJdGVtQXJyYXkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBsZXQgY3VycmVudEl0ZW1JRCA9IGN1cnJlbnRQcm9qZWN0SXRlbUFycmF5W2pdLml0ZW1JRDtcbiAgICAgICAgICBpZiAoY3VycmVudEl0ZW1JRCA9PT0gaXRlbVRvQmVEZWxldGVkKSB7XG4gICAgICAgICAgICBjdXJyZW50UHJvamVjdEl0ZW1BcnJheUluU3RvcmFnZS5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICBjdXJyZW50UHJvamVjdEl0ZW1BcnJheS5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY3VycmVudFByb2plY3RTdG9yYWdlLml0ZW1zID0gY3VycmVudFByb2plY3RJdGVtQXJyYXlJblN0b3JhZ2U7XG4gICAgY29uc3QganNvblN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5KGN1cnJlbnRQcm9qZWN0U3RvcmFnZSk7XG4gICAgc3RvcmVkSXRlbXMuc2V0SXRlbShwcm9qZWN0LCBqc29uU3RyaW5naWZ5KTtcbiAgfTtcblxuICAvLyBmb3IgZWRpdGluZyB0YXNrcywgcmVtb3ZlcyB0YXNrIGZyb20gcHJvamVjdCBpdGVtcywgYW5kIGFkZHMgaXQgYWdhaW4gd2l0aCB0aGUgc2FtZSBJRFxuICBjb25zdCBlZGl0SXRlbUluUHJvamVjdCA9IGZ1bmN0aW9uIChjdXJyZW50SXRlbSkge1xuICAgIGNvbnN0IHN0b3JlZEl0ZW1zID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICBsZXQgcHJvamVjdEluU3RvcmFnZSA9IHN0b3JlZEl0ZW1zLmdldEl0ZW0oY3VycmVudEl0ZW0ucHJvamVjdCk7XG4gICAgbGV0IHByb2plY3RJblN0b3JhZ2VQYXJzZWQgPSBKU09OLnBhcnNlKHByb2plY3RJblN0b3JhZ2UpO1xuICAgIGxldCBwcm9qZWN0SXRlbXNBcnJheSA9IHByb2plY3RJblN0b3JhZ2VQYXJzZWQuaXRlbXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0SXRlbXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbUluQXJyYXkgPSBwcm9qZWN0SXRlbXNBcnJheVtpXTtcbiAgICAgIGlmIChpdGVtSW5BcnJheS5pdGVtSUQgPT09IGN1cnJlbnRJdGVtLml0ZW1JRCkge1xuICAgICAgICBwcm9qZWN0SXRlbXNBcnJheS5zcGxpY2UoaSwgMSwgY3VycmVudEl0ZW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcHJvamVjdEluU3RvcmFnZVBhcnNlZC5pdGVtcyA9IHByb2plY3RJdGVtc0FycmF5O1xuICAgIGNvbnN0IHByZXBhcmVQcm9qZWN0Rm9yU3RvcmFnZSA9IEpTT04uc3RyaW5naWZ5KHByb2plY3RJblN0b3JhZ2VQYXJzZWQpO1xuICAgIHN0b3JlZEl0ZW1zLnNldEl0ZW0oY3VycmVudEl0ZW0ucHJvamVjdCwgcHJlcGFyZVByb2plY3RGb3JTdG9yYWdlKTtcbiAgfTtcblxuICBjb25zdCBwcm9qZWN0Q29sbGVjdGlvbiA9IGZ1bmN0aW9uICh0aXRsZSwgbmFtZSkge1xuICAgIGNvbnN0IG5ld1Byb2plY3QgPSBjcmVhdGVOZXdQcm9qZWN0KHRpdGxlLCBuYW1lLCBbXSk7XG4gICAgcHJvamVjdHNDcmVhdGVkLnB1c2gobmV3UHJvamVjdCk7XG4gICAgcmV0dXJuIG5ld1Byb2plY3Q7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlUHJvamVjdEFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgcHJvamVjdHNDcmVhdGVkID0gYXJyYXk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmVJdGVtRnJvbVByb2plY3QsXG4gICAgcHJvamVjdENvbGxlY3Rpb24sXG4gICAgYWRkSXRlbVRvUHJvamVjdCxcbiAgICBwcm9qZWN0c0NyZWF0ZWQsXG4gICAgdXBkYXRlUHJvamVjdEFycmF5LFxuICAgIGVkaXRJdGVtSW5Qcm9qZWN0LFxuICB9O1xufSkoKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdC5pby9manVsZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gTm93IGBpc1ZhbGlkYCBkb2Vzbid0IHRocm93IGFuIGV4Y2VwdGlvblxuICogICBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKiAgIEluc3RlYWQsIGFyZ3VtZW50IGlzIGNvbnZlcnRlZCBiZWZvcmVoYW5kIHVzaW5nIGB0b0RhdGVgLlxuICpcbiAqICAgRXhhbXBsZXM6XG4gKlxuICogICB8IGBpc1ZhbGlkYCBhcmd1bWVudCAgICAgICAgfCBCZWZvcmUgdjIuMC4wIHwgdjIuMC4wIG9ud2FyZCB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBgbmV3IERhdGUoKWAgICAgICAgICAgICAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnMjAxNi0wMS0wMScpYCAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcnKWAgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoMTQ4ODM3MDgzNTA4MSlgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZShOYU4pYCAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcyMDE2LTAxLTAxJ2AgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJydgICAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAxNDg4MzcwODM1MDgxYCAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYE5hTmAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqXG4gKiAgIFdlIGludHJvZHVjZSB0aGlzIGNoYW5nZSB0byBtYWtlICpkYXRlLWZucyogY29uc2lzdGVudCB3aXRoIEVDTUFTY3JpcHQgYmVoYXZpb3JcbiAqICAgdGhhdCB0cnkgdG8gY29lcmNlIGFyZ3VtZW50cyB0byB0aGUgZXhwZWN0ZWQgdHlwZVxuICogICAod2hpY2ggaXMgYWxzbyB0aGUgY2FzZSB3aXRoIG90aGVyICpkYXRlLWZucyogZnVuY3Rpb25zKS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihkYXRlKTtcbn0iLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlTdHJpbmcsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoZGlydHlTdHJpbmcpO1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG5cbiAgICBpZiAoIXBhcnNlUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aClcbiAgICB9O1xuICB9O1xufSIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ10gLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX2RpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgZGlydHlPcHRpb25zKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xuICAvKlxuICAgKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICAgKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gICAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAgICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAgICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAgICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICAgKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAgICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICAgKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAgICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICAgKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gICAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICAgKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAgICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICAgKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gICAqXG4gICAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAgICpcbiAgICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gICAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gICAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAgICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gICAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAgICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gICAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICAgKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAgICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gICAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAgICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAgICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAgICovXG5cbn07XG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/Lyk7XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRoZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCB7IGNvbXBhcmVBc2MsIGZvcm1hdCwgZ2V0RGF0ZSwgZ2V0TW9udGgsIGdldFllYXIgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCB7IGNyZWF0ZVByb2plY3QgfSBmcm9tIFwiLi9jcmVhdGVQcm9qZWN0LmpzXCI7XG5cbmV4cG9ydCB7IGNyZWF0aW9uVGltZSwgY3JlYXRlTGlzdCwgY3JlYXRlQ2hlY2tMaXN0T2JqZWN0IH07XG5cbi8vIGZvciByZWdpc3RlcmluZyB0aW1lIG9mIHRhc2sgY3JlYXRpb25cbmZ1bmN0aW9uIGNyZWF0aW9uVGltZSgpIHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgZm9ybWF0ZWREYXRlID0gZm9ybWF0KG5vdywgXCJ5eXl5LU1NLWRkXCIpO1xuICByZXR1cm4gZm9ybWF0ZWREYXRlO1xufVxuXG4vLyB0YXNrIGNvbnN0cnVjdG9yIGNsYXNzXG5jbGFzcyB0b0RvQ3JlYXRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHRpdGxlLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIGR1ZURhdGUsXG4gICAgcHJpb3JpdHksXG4gICAgY3JlYXRpb25EYXRlLFxuICAgIG5vdGVzLFxuICAgIHVybCxcbiAgICBjaGVja0xpc3QsXG4gICAgcHJvamVjdCxcbiAgICBpdGVtTnVtYmVySW5Qcm9qZWN0LFxuICAgIGRvbmVcbiAgKSB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB0aGlzLmNyZWF0aW9uRGF0ZSA9IGNyZWF0aW9uRGF0ZTtcbiAgICB0aGlzLm5vdGVzID0gbm90ZXM7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICB0aGlzLmRvbmUgPSBkb25lO1xuICAgIHRoaXMuaXRlbUlEID0gcHJvamVjdCArIFwiaXRlbVwiICsgaXRlbU51bWJlckluUHJvamVjdDtcbiAgICB0aGlzLmNoZWNrTGlzdCA9IGNyZWF0ZUNoZWNrTGlzdE9iamVjdChjaGVja0xpc3QsIHRoaXMuaXRlbUlEKTtcbiAgfVxufVxuXG4vLyBlYWNoIHRhc2sgY2FuIGhhdmUgYSBjaGVja2xpc3Qgd2l0aCBzdWJ0YXNrcy4gdGhlIHVzZXIgaW5wdXRzIHRoZSBzdWJ0YXNrcyBvbiBhIHRleHQgaW5wdXQsIHNlcGFyYXRpbmcgZWFjaCB0YXNrIHdpdGggYSBcIjtcIiB3aXRoIGlzIHRyYW5zZm9ybWVkIGludG8gYW4gb2JqZWN0IHdpdGggZnVuY3Rpb25cbmZ1bmN0aW9uIGNyZWF0ZUNoZWNrTGlzdE9iamVjdChjaGVja0xpc3QsIGl0ZW1JRCkge1xuICBpZiAoY2hlY2tMaXN0ID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgY29uc3QgY2hlY2tMaXN0U3RyaW5nID0gY2hlY2tMaXN0O1xuICBjb25zdCBjaGVja0xpc3RBcnJheSA9IGNoZWNrTGlzdFN0cmluZy5zcGxpdChcIjtcIik7XG4gIGxldCBvYmogPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGVja0xpc3RBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNsZWFuU3RyaW5nID0gY2hlY2tMaXN0QXJyYXlbaV0udHJpbSgpO1xuICAgIGNvbnN0IG9iaktleSA9IFwidGFza1wiICsgaXRlbUlEICsgaTtcbiAgICBjb25zdCBvYmpLZXlTdGF0dXMgPSBvYmpLZXkgKyBcIlN0YXR1c1wiO1xuICAgIG9ialtvYmpLZXldID0gY2xlYW5TdHJpbmc7XG4gICAgb2JqW29iaktleVN0YXR1c10gPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vLyBmdW5jdGlvbiBmYWN0b3J5IHRvIGNyZWF0ZSB0YXNrcywgc2F2ZSB0YXNrcyBvbiBhbiBhcnJheSBhbmQgcmVtb3ZlIHRhc2tzXG5jb25zdCBjcmVhdGVMaXN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgbGV0IGl0ZW1MaXN0ID0gW107XG4gIGNvbnN0IHVwZGF0ZUl0ZW1MaXN0ID0gZnVuY3Rpb24gKG5ld2xpc3QsIGFkZG9ycmVtb3ZlLCBpdGVtKSB7XG4gICAgaWYgKGFkZG9ycmVtb3ZlID09PSBcImFkZFwiKSB7XG4gICAgICAvLyB3aGVuIGEgbmV3IHRhc2sgaXMgY3JlYXRlZCwgYWRkcyB0YXNrIHRvIGl0ZW1MaXN0XG4gICAgICBpdGVtTGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgcmV0dXJuIGl0ZW1MaXN0O1xuICAgIH0gZWxzZSBpZiAobmV3bGlzdCA9PT0gbnVsbCAmJiBhZGRvcnJlbW92ZSA9PT0gbnVsbCAmJiBpdGVtID09PSBudWxsKSB7XG4gICAgICAvLyBmb3IgZ2V0dGluZyBhbmQgdXAgdG8gZGF0ZSBsaXN0IG9mIGV4aXN0aW5nIHRhc2tzXG4gICAgICByZXR1cm4gaXRlbUxpc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW1MaXN0ID0gbmV3bGlzdDtcbiAgICAgIHJldHVybiBpdGVtTGlzdDtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmV0cmlldmVJdGVtID0gZnVuY3Rpb24gKGl0ZW1JRCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpdGVtTGlzdFtpXS5pdGVtSUQgPT09IGl0ZW1JRCkge1xuICAgICAgICByZXR1cm4gaXRlbUxpc3RbaV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIHVzZXMgdGhlIGNvbnN0cnVjdG9yIHRvZG9jcmVhdG9yIGFuZCB1cGRhdGVzIGl0ZW0gbGlzdFxuICBjb25zdCBjcmVhdGVOZXdJdGVtID0gZnVuY3Rpb24gKFxuICAgIHRpdGxlLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIGR1ZURhdGUsXG4gICAgcHJpb3JpdHksXG4gICAgbm90ZXMsXG4gICAgdXJsLFxuICAgIGNoZWNrTGlzdCxcbiAgICBwcm9qZWN0LFxuICAgIGl0ZW1OdW1iZXJJblByb2plY3RcbiAgKSB7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBjcmVhdGlvblRpbWUoKTtcbiAgICBjb25zdCBuZXdJdGVtID0gbmV3IHRvRG9DcmVhdGVyKFxuICAgICAgdGl0bGUsXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIGR1ZURhdGUsXG4gICAgICBwcmlvcml0eSxcbiAgICAgIGN1cnJlbnRUaW1lLFxuICAgICAgbm90ZXMsXG4gICAgICB1cmwsXG4gICAgICBjaGVja0xpc3QsXG4gICAgICBwcm9qZWN0LFxuICAgICAgaXRlbU51bWJlckluUHJvamVjdCxcbiAgICAgIC8vZXZlcnkgaXRlbSBjcmVhdGVkIHN0YXJ0cyB3aXRoIGEgIWRvbmVcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgICB1cGRhdGVJdGVtTGlzdChpdGVtTGlzdCwgXCJhZGRcIiwgbmV3SXRlbSk7XG4gICAgcmV0dXJuIG5ld0l0ZW07XG4gIH07XG4gIGNvbnN0IHJlbW92ZUl0ZW1Gcm9tTGlzdCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudEl0ZW1Pbkxpc3QgPSBpdGVtTGlzdFtpXTtcbiAgICAgIGlmIChjdXJyZW50SXRlbU9uTGlzdC5pdGVtSUQgPT09IGl0ZW0uaXRlbUlEKSB7XG4gICAgICAgIGxldCBuZXdsaXN0ID0gaXRlbUxpc3Quc2xpY2UoMCwgaSkuY29uY2F0KGl0ZW1MaXN0LnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGl0ZW1MaXN0ID0gdXBkYXRlSXRlbUxpc3QobmV3bGlzdCwgXCJyZW1vdmVcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUFsbEl0ZW1zRnJvbVByb2plY3QgPSBmdW5jdGlvbiAocHJvamVjdCkge1xuICAgIGNvbnN0IGN1cnJlbnRpdGVtcyA9IGl0ZW1MaXN0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gY3VycmVudGl0ZW1zW2ldO1xuICAgICAgaWYgKGl0ZW0ucHJvamVjdCA9PT0gcHJvamVjdCkge1xuICAgICAgICByZW1vdmVJdGVtRnJvbUxpc3QoaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZU5ld0l0ZW0sXG4gICAgdXBkYXRlSXRlbUxpc3QsXG4gICAgcmVtb3ZlSXRlbUZyb21MaXN0LFxuICAgIGl0ZW1MaXN0LFxuICAgIHJlbW92ZUFsbEl0ZW1zRnJvbVByb2plY3QsXG4gICAgcmV0cmlldmVJdGVtLFxuICB9O1xufSkoKTtcbiIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgY29tcGFyZUFzY1xuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAtMSwgMCBvciAxLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcGFyZSB0aGUgdHdvIGRhdGVzIGFuZCByZXR1cm4gMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBhZnRlciB0aGUgc2Vjb25kLFxuICogLTEgaWYgdGhlIGZpcnN0IGRhdGUgaXMgYmVmb3JlIHRoZSBzZWNvbmQgb3IgMCBpZiBkYXRlcyBhcmUgZXF1YWwuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgcmVzdWx0IG9mIHRoZSBjb21wYXJpc29uXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbXBhcmUgMTEgRmVicnVhcnkgMTk4NyBhbmQgMTAgSnVseSAxOTg5OlxuICogY29uc3QgcmVzdWx0ID0gY29tcGFyZUFzYyhuZXcgRGF0ZSgxOTg3LCAxLCAxMSksIG5ldyBEYXRlKDE5ODksIDYsIDEwKSlcbiAqIC8vPT4gLTFcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU29ydCB0aGUgYXJyYXkgb2YgZGF0ZXM6XG4gKiBjb25zdCByZXN1bHQgPSBbXG4gKiAgIG5ldyBEYXRlKDE5OTUsIDYsIDIpLFxuICogICBuZXcgRGF0ZSgxOTg3LCAxLCAxMSksXG4gKiAgIG5ldyBEYXRlKDE5ODksIDYsIDEwKVxuICogXS5zb3J0KGNvbXBhcmVBc2MpXG4gKiAvLz0+IFtcbiAqIC8vICAgV2VkIEZlYiAxMSAxOTg3IDAwOjAwOjAwLFxuICogLy8gICBNb24gSnVsIDEwIDE5ODkgMDA6MDA6MDAsXG4gKiAvLyAgIFN1biBKdWwgMDIgMTk5NSAwMDowMDowMFxuICogLy8gXVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBhcmVBc2MoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciBkaWZmID0gZGF0ZUxlZnQuZ2V0VGltZSgpIC0gZGF0ZVJpZ2h0LmdldFRpbWUoKTtcblxuICBpZiAoZGlmZiA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoZGlmZiA+IDApIHtcbiAgICByZXR1cm4gMTsgLy8gUmV0dXJuIDAgaWYgZGlmZiBpcyAwOyByZXR1cm4gTmFOIGlmIGRpZmYgaXMgTmFOXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRpZmY7XG4gIH1cbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDA7XG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xudmFyIERFRkFVTFRfQURESVRJT05BTF9ESUdJVFMgPSAyO1xudmFyIHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkL1xufTtcbnZhciBkYXRlUmVnZXggPSAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbnZhciB0aW1lUmVnZXggPSAvXihcXGR7Mn0oPzpbLixdXFxkKik/KSg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8oPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/JC87XG52YXIgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcbi8qKlxuICogQG5hbWUgcGFyc2VJU09cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgSVNPIHN0cmluZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUGFyc2UgdGhlIGdpdmVuIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEZ1bmN0aW9uIGFjY2VwdHMgY29tcGxldGUgSVNPIDg2MDEgZm9ybWF0cyBhcyB3ZWxsIGFzIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zLlxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXNuJ3QgYSBzdHJpbmcsIHRoZSBmdW5jdGlvbiBjYW5ub3QgcGFyc2UgdGhlIHN0cmluZyBvclxuICogdGhlIHZhbHVlcyBhcmUgaW52YWxpZCwgaXQgcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBwcmV2aW91cyBgcGFyc2VgIGltcGxlbWVudGF0aW9uIHdhcyByZW5hbWVkIHRvIGBwYXJzZUlTT2AuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgcGFyc2UoJzIwMTYtMDEtMDEnKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBwYXJzZUlTTygnMjAxNi0wMS0wMScpXG4gKiAgIGBgYFxuICpcbiAqIC0gYHBhcnNlSVNPYCBub3cgdmFsaWRhdGVzIHNlcGFyYXRlIGRhdGUgYW5kIHRpbWUgdmFsdWVzIGluIElTTy04NjAxIHN0cmluZ3NcbiAqICAgYW5kIHJldHVybnMgYEludmFsaWQgRGF0ZWAgaWYgdGhlIGRhdGUgaXMgaW52YWxpZC5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgcGFyc2VJU08oJzIwMTgtMTMtMzInKVxuICogICAvLz0+IEludmFsaWQgRGF0ZVxuICogICBgYGBcbiAqXG4gKiAtIGBwYXJzZUlTT2Agbm93IGRvZXNuJ3QgZmFsbCBiYWNrIHRvIGBuZXcgRGF0ZWAgY29uc3RydWN0b3JcbiAqICAgaWYgaXQgZmFpbHMgdG8gcGFyc2UgYSBzdHJpbmcgYXJndW1lbnQuIEluc3RlYWQsIGl0IHJldHVybnMgYEludmFsaWQgRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJzIwMTQtMDItMTFUMTE6MzA6MzAnIHRvIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2VJU08oJzIwMTQtMDItMTFUMTE6MzA6MzAnKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJyswMjAxNDEwMScgdG8gZGF0ZSxcbiAqIC8vIGlmIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0IGlzIDE6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2VJU08oJyswMjAxNDEwMScsIHsgYWRkaXRpb25hbERpZ2l0czogMSB9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUlTTyhhcmd1bWVudCwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPSBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMgPT0gbnVsbCA/IERFRkFVTFRfQURESVRJT05BTF9ESUdJVFMgOiB0b0ludGVnZXIob3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzKTtcblxuICBpZiAoYWRkaXRpb25hbERpZ2l0cyAhPT0gMiAmJiBhZGRpdGlvbmFsRGlnaXRzICE9PSAxICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYWRkaXRpb25hbERpZ2l0cyBtdXN0IGJlIDAsIDEgb3IgMicpO1xuICB9XG5cbiAgaWYgKCEodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudCk7XG4gIHZhciBkYXRlO1xuXG4gIGlmIChkYXRlU3RyaW5ncy5kYXRlKSB7XG4gICAgdmFyIHBhcnNlWWVhclJlc3VsdCA9IHBhcnNlWWVhcihkYXRlU3RyaW5ncy5kYXRlLCBhZGRpdGlvbmFsRGlnaXRzKTtcbiAgICBkYXRlID0gcGFyc2VEYXRlKHBhcnNlWWVhclJlc3VsdC5yZXN0RGF0ZVN0cmluZywgcGFyc2VZZWFyUmVzdWx0LnllYXIpO1xuICB9XG5cbiAgaWYgKGlzTmFOKGRhdGUpIHx8ICFkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciB0aW1lID0gMDtcbiAgdmFyIG9mZnNldDtcblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG5cbiAgICBpZiAoaXNOYU4odGltZSkgfHwgdGltZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lKSB7XG4gICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSk7XG5cbiAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkaXJ0eURhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKTsgLy8ganMgcGFyc2VkIHN0cmluZyBhc3N1bWluZyBpdCdzIGluIFVUQyB0aW1lem9uZVxuICAgIC8vIGJ1dCB3ZSBuZWVkIGl0IHRvIGJlIHBhcnNlZCBpbiBvdXIgdGltZXpvbmVcbiAgICAvLyBzbyB3ZSB1c2UgdXRjIHZhbHVlcyB0byBidWlsZCBkYXRlIGluIG91ciB0aW1lem9uZS5cbiAgICAvLyBZZWFyIHZhbHVlcyBmcm9tIDAgdG8gOTkgbWFwIHRvIHRoZSB5ZWFycyAxOTAwIHRvIDE5OTlcbiAgICAvLyBzbyBzZXQgeWVhciBleHBsaWNpdGx5IHdpdGggc2V0RnVsbFllYXIuXG5cbiAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoMCk7XG4gICAgcmVzdWx0LnNldEZ1bGxZZWFyKGRpcnR5RGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkaXJ0eURhdGUuZ2V0VVRDTW9udGgoKSwgZGlydHlEYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgcmVzdWx0LnNldEhvdXJzKGRpcnR5RGF0ZS5nZXRVVENIb3VycygpLCBkaXJ0eURhdGUuZ2V0VVRDTWludXRlcygpLCBkaXJ0eURhdGUuZ2V0VVRDU2Vjb25kcygpLCBkaXJ0eURhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0RGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIHZhciBkYXRlU3RyaW5ncyA9IHt9O1xuICB2YXIgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLmRhdGVUaW1lRGVsaW1pdGVyKTtcbiAgdmFyIHRpbWVTdHJpbmc7IC8vIFRoZSByZWdleCBtYXRjaCBzaG91bGQgb25seSByZXR1cm4gYXQgbWF4aW11bSB0d28gYXJyYXkgZWxlbWVudHMuXG4gIC8vIFtkYXRlXSwgW3RpbWVdLCBvciBbZGF0ZSwgdGltZV0uXG5cbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICByZXR1cm4gZGF0ZVN0cmluZ3M7XG4gIH1cblxuICBpZiAoLzovLnRlc3QoYXJyYXlbMF0pKSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IG51bGw7XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzBdO1xuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXTtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMV07XG5cbiAgICBpZiAocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIudGVzdChkYXRlU3RyaW5ncy5kYXRlKSkge1xuICAgICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIpWzBdO1xuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmcuc3Vic3RyKGRhdGVTdHJpbmdzLmRhdGUubGVuZ3RoLCBkYXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZS5leGVjKHRpbWVTdHJpbmcpO1xuXG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZy5yZXBsYWNlKHRva2VuWzFdLCAnJyk7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IHRva2VuWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0ZVN0cmluZ3M7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14oPzooXFxcXGR7NH18WystXVxcXFxkeycgKyAoNCArIGFkZGl0aW9uYWxEaWdpdHMpICsgJ30pfChcXFxcZHsyfXxbKy1dXFxcXGR7JyArICgyICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSkkKScpO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKHJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcblxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4ge1xuICAgIHllYXI6IG51bGxcbiAgfTtcbiAgdmFyIHllYXIgPSBjYXB0dXJlc1sxXSAmJiBwYXJzZUludChjYXB0dXJlc1sxXSk7XG4gIHZhciBjZW50dXJ5ID0gY2FwdHVyZXNbMl0gJiYgcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICByZXR1cm4ge1xuICAgIHllYXI6IGNlbnR1cnkgPT0gbnVsbCA/IHllYXIgOiBjZW50dXJ5ICogMTAwLFxuICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKChjYXB0dXJlc1sxXSB8fCBjYXB0dXJlc1syXSkubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0cmluZywgeWVhcikge1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICBpZiAoeWVhciA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHZhciBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2goZGF0ZVJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHN0cmluZ1xuXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBudWxsO1xuICB2YXIgaXNXZWVrRGF0ZSA9ICEhY2FwdHVyZXNbNF07XG4gIHZhciBkYXlPZlllYXIgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1vbnRoID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1syXSkgLSAxO1xuICB2YXIgZGF5ID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1szXSk7XG4gIHZhciB3ZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s0XSk7XG4gIHZhciBkYXlPZldlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzVdKSAtIDE7XG5cbiAgaWYgKGlzV2Vla0RhdGUpIHtcbiAgICBpZiAoIXZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaywgZGF5T2ZXZWVrKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRheU9mSVNPV2Vla1llYXIoeWVhciwgd2VlaywgZGF5T2ZXZWVrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuXG4gICAgaWYgKCF2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRheSkgfHwgIXZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG5cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBNYXRoLm1heChkYXlPZlllYXIsIGRheSkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gcGFyc2VJbnQodmFsdWUpIDogMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWVTdHJpbmcpIHtcbiAgdmFyIGNhcHR1cmVzID0gdGltZVN0cmluZy5tYXRjaCh0aW1lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gbnVsbDsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHRpbWVcblxuICB2YXIgaG91cnMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1pbnV0ZXMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzJdKTtcbiAgdmFyIHNlY29uZHMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzNdKTtcblxuICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArIHNlY29uZHMgKiAxMDAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoJywnLCAnLicpKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWV6b25lKHRpbWV6b25lU3RyaW5nKSB7XG4gIGlmICh0aW1lem9uZVN0cmluZyA9PT0gJ1onKSByZXR1cm4gMDtcbiAgdmFyIGNhcHR1cmVzID0gdGltZXpvbmVTdHJpbmcubWF0Y2godGltZXpvbmVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiAwO1xuICB2YXIgc2lnbiA9IGNhcHR1cmVzWzFdID09PSAnKycgPyAtMSA6IDE7XG4gIHZhciBob3VycyA9IHBhcnNlSW50KGNhcHR1cmVzWzJdKTtcbiAgdmFyIG1pbnV0ZXMgPSBjYXB0dXJlc1szXSAmJiBwYXJzZUludChjYXB0dXJlc1szXSkgfHwgMDtcblxuICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHJldHVybiBzaWduICogKGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSk7XG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGlzb1dlZWtZZWFyLCAwLCA0KTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeURheSA9IGRhdGUuZ2V0VVRDRGF5KCkgfHwgNztcbiAgdmFyIGRpZmYgPSAod2VlayAtIDEpICogNyArIGRheSArIDEgLSBmb3VydGhPZkphbnVhcnlEYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn0gLy8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcbi8vIEZlYnJ1YXJ5IGlzIG51bGwgdG8gaGFuZGxlIHRoZSBsZWFwIHllYXIgKHVzaW5nIHx8KVxuXG5cbnZhciBkYXlzSW5Nb250aHMgPSBbMzEsIG51bGwsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gIHJldHVybiBtb250aCA+PSAwICYmIG1vbnRoIDw9IDExICYmIGRhdGUgPj0gMSAmJiBkYXRlIDw9IChkYXlzSW5Nb250aHNbbW9udGhdIHx8IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAyOSA6IDI4KSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpIHtcbiAgcmV0dXJuIGRheU9mWWVhciA+PSAxICYmIGRheU9mWWVhciA8PSAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMzY2IDogMzY1KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVXZWVrRGF0ZShfeWVhciwgd2VlaywgZGF5KSB7XG4gIHJldHVybiB3ZWVrID49IDEgJiYgd2VlayA8PSA1MyAmJiBkYXkgPj0gMCAmJiBkYXkgPD0gNjtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gIGlmIChob3VycyA9PT0gMjQpIHtcbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCAmJiBzZWNvbmRzID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIHNlY29uZHMgPj0gMCAmJiBzZWNvbmRzIDwgNjAgJiYgbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPCA2MCAmJiBob3VycyA+PSAwICYmIGhvdXJzIDwgMjU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZXpvbmUoX2hvdXJzLCBtaW51dGVzKSB7XG4gIHJldHVybiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8PSA1OTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVMaXN0IH0gZnJvbSBcIi4vY3JlYXRlVG9Eby5qc1wiO1xuaW1wb3J0IHsgYWRkSXRlbVRvRG9tU2ltcGxpZmllZCB9IGZyb20gXCIuL2RvbXRoaW5ncy5qc1wiO1xuaW1wb3J0IHsgY29tcGFyZUFzYywgcGFyc2VJU08gfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmV4cG9ydCB7IGNoZWNrSW5mb0Zyb21TdG9yYWdlLCBvbkFkZENoZWNrRm9yQ2hhbmdlc09uSW5mbywgY2hhbmdlSXRlbU9uSW5mbyB9O1xuXG4vLyB0aGlzIGZpbGUgY3JlYXRlcyB0aGUgaW5mbyBzZWN0aW9uIG9uIHRoZSBsZWZ0IG9mIHRoZSBwYWdlLyB0b3AgZm9yIHNtYWxsIHNjcmVlbnMuIERpc3BsYXlzIGhpZ2hlc3QgcHJpb3JpdHkgdGFzayBhbmQgY2xvc2VzdCBkdWUgZGF0ZS4gT25seSB0YXNrcyB3aXRoID4gMSBwcmlvcml0eSBhcmUgZGlzcGxheWVkXG5cbi8vIGxvb2tzIGZvciB0aGUgaGlnaGVzdCBwcmlvcml0eSB0YXNrIG9uIGEgbGlzdCBvZiB0YXNrcy4gcmV0dXJucyBoaWdoZXN0IHByaW9yaXR5IHRhc2tcbmZ1bmN0aW9uIGhpZ2hlc3RQcmlvcml0eShpdGVtcywgb2JqSCkge1xuICBsZXQgb2JqSGlnaGVzdDtcbiAgaWYgKG9iakggIT09IHVuZGVmaW5lZCkge1xuICAgIG9iakhpZ2hlc3QgPSBvYmpIO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBvYmogPSBpdGVtc1tpXTtcbiAgICAvLyBza2lwcyBpdGVtcyB0aGF0IGFyZSBmaW5pc2hlZFxuICAgIGlmIChvYmouZG9uZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHByaW9yaXR5ID0gb2JqLnByaW9yaXR5O1xuICAgIGlmIChvYmpIaWdoZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iakhpZ2hlc3QgPSBvYmo7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gb2JqSGlnaGVzdCBpcyB1cGRhdGVkIGV2ZXJ5IHRpbWUgYSBoaWdoZXIgcHJpb3JpdHkgdGFzayBpcyBmb3VuZC4gSWYgcHJpb3JpdHkgaXMgZml2ZSwgZXhpdHMgdGhlIGxvb3Agd2l0aCB0aGF0IHRhc2tcbiAgICBpZiAocHJpb3JpdHkgPiBvYmpIaWdoZXN0LnByaW9yaXR5KSB7XG4gICAgICBvYmpIaWdoZXN0ID0gb2JqO1xuICAgICAgaWYgKHByaW9yaXR5ID09PSBcIjVcIikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iakhpZ2hlc3Q7XG59XG5cbi8vIGNvbXBhcmVzIHByaW9yaXR5IGJldHdlZW4gdHdvIHRhc2tzXG5mdW5jdGlvbiBoaWdoZXN0UHJpb3JpdHlTaW5nbGUoaXRlbSwgb2JqSCkge1xuICBsZXQgb2JqSGlnaGVzdDtcbiAgaWYgKG9iakggIT09IHVuZGVmaW5lZCkge1xuICAgIG9iakhpZ2hlc3QgPSBvYmpIO1xuICB9XG4gIGlmIChpdGVtLnByaW9yaXR5ID4gb2JqSGlnaGVzdC5wcmlvcml0eSkge1xuICAgIHJldHVybiBpdGVtO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpIaWdoZXN0O1xuICB9XG59XG5cbi8vIHNhbWUgdGhpbmcgYXMgdGhlIGhpZ2hlc3QgcHJpb3JpdHksIGJ1dCBjb21wYXJpbmcgZGF0ZXMuIHJldHVybnMgdGhlIHRhc2sgd2l0aCB0aGUgY2xvc2VzdCBkdWUgZGF0ZVxuZnVuY3Rpb24gY2xvc2VzdER1ZURhdGUoaXRlbXMsIG9iakQpIHtcbiAgbGV0IGNsb3Nlc3Q7XG4gIGlmIChvYmpEICE9PSB1bmRlZmluZWQpIHtcbiAgICBjbG9zZXN0ID0gb2JqRDtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgb2JqID0gaXRlbXNbaV07XG4gICAgY29uc3QgZHVlRGF0ZSA9IG9iai5kdWVEYXRlO1xuICAgIGlmIChkdWVEYXRlID09PSBcIlwiIHx8IG9iai5kb25lKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGR1ZURhdGUgIT09IFwiXCIgJiYgY2xvc2VzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbG9zZXN0ID0gb2JqO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBhcmVEYXRlcyA9IGNvbXBhcmVBc2MoXG4gICAgICBwYXJzZUlTTyhjbG9zZXN0LmR1ZURhdGUpLFxuICAgICAgcGFyc2VJU08oZHVlRGF0ZSlcbiAgICApO1xuICAgIGlmIChjb21wYXJlRGF0ZXMgPT09IDEpIHtcbiAgICAgIGNsb3Nlc3QgPSBvYmo7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbG9zZXN0O1xufVxuXG4vLyBjb21wYXJlcyBkdWUgZGF0ZSBiZXR3ZWVuIHR3byB0YXNrc1xuZnVuY3Rpb24gY2xvc2VzdER1ZURhdGVTaW5nbGUoaXRlbSwgb2JqRCkge1xuICBsZXQgb2JqQ2xvc2VzdDtcbiAgaWYgKG9iakQgIT09IHVuZGVmaW5lZCkge1xuICAgIG9iakNsb3Nlc3QgPSBvYmpEO1xuICB9XG4gIGNvbnN0IGNvbXBhcmVEYXRlcyA9IGNvbXBhcmVBc2MoXG4gICAgcGFyc2VJU08ob2JqQ2xvc2VzdC5kdWVEYXRlKSxcbiAgICBwYXJzZUlTTyhpdGVtLmR1ZURhdGUpXG4gICk7XG4gIGlmIChjb21wYXJlRGF0ZXMgPT09IDEpIHtcbiAgICBvYmpDbG9zZXN0ID0gaXRlbTtcbiAgfVxuICByZXR1cm4gb2JqQ2xvc2VzdDtcbn1cblxuLy8gd2hlbmV2ZXIgYSBuZXcgdGFzayBpcyBjcmVhdGVkLCBjaGVja3MgaWYgdGhlIHRhc2tzIGRpc3BsYXllZCBhcyBoaWdoZXN0IHByaW9yaXR5IC8gY2xvc2VzdCBkdWUgZGF0ZSwgYXJlIHN0aWxsIGhpZ2hlc3QvIGNsb3Nlc3RcbmZ1bmN0aW9uIG9uQWRkQ2hlY2tGb3JDaGFuZ2VzT25JbmZvKGl0ZW0pIHtcbiAgY29uc3Qgb2JqUHJpb3JpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm9Qcmlvcml0eVwiKTtcbiAgY29uc3Qgb2JqRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb0RhdGVcIik7XG4gIGlmIChvYmpQcmlvcml0eSA9PT0gbnVsbCkge1xuICAgIC8vIGlmIG5vIHRhc2sgd2FzIGJlaW5nIGRpc3BsYXllZCBiZWZvcmUgdGhlIG5ldyB0YXNrIHdhcyBhZGRlZCwgYW5kIGlmIHRoZSBjdXJyZW50IHRhc2sgaGFzIGEgcHJpb3JpdHkgPiAxLCBkaXNwbGF5cyB0aGUgbmV3IHRhc2tcbiAgICBpZiAoaXRlbS5wcmlvcml0eSA+IDEpIHtcbiAgICAgIGFkZEluZm9Ub0RvbShpdGVtLCBcInByaW9yaXR5XCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBvbmx5IGNoZWNrcyBpZiBwcmlvcml0eSBvZiBuZXcgdGFzayA+IDFcbiAgICBpZiAoTnVtYmVyKGl0ZW0ucHJpb3JpdHkpID4gMSkge1xuICAgICAgY29uc3Qgb2JqSW5mb1ByaW9yaXR5SUQgPSBvYmpQcmlvcml0eS5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgIC8vYSB0YXNrIGRpc3BsYXllZCBvbiBpbmZvIGNhcnJpZXMgd2l0aCBpdCB0aGUgb2JqZWN0IElELiBieSByZW1vdmUgXCJpbmZvUFwiIGZyb20gdGhlIElELCB3ZSBnZXQgdGhlIG9iamVjdCBJRC5cbiAgICAgIGNvbnN0IG9iaklEID0gb2JqSW5mb1ByaW9yaXR5SUQucmVwbGFjZShcImluZm9QXCIsIFwiXCIpO1xuICAgICAgY29uc3QgY3VycmVudEl0ZW1MaXN0ID0gY3JlYXRlTGlzdC51cGRhdGVJdGVtTGlzdChudWxsLCBudWxsLCBudWxsKTtcbiAgICAgIGxldCBoaWdoZXN0cHJpb3JpdHlvYmo7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRJdGVtTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50aXRlbSA9IGN1cnJlbnRJdGVtTGlzdFtpXTtcbiAgICAgICAgaWYgKGN1cnJlbnRpdGVtLml0ZW1JRCA9PT0gb2JqSUQpIHtcbiAgICAgICAgICAvLyBjb21wYXJlcyBwcmlvcml0eSBvZiBkaXNwbGF5ZWQgdGFzayB3aXRoIHRoZSBuZXcgdGFza1xuICAgICAgICAgIGhpZ2hlc3Rwcmlvcml0eW9iaiA9IGhpZ2hlc3RQcmlvcml0eVNpbmdsZShpdGVtLCBjdXJyZW50aXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vZGlzcGxheXMgdGFza1xuICAgICAgYWRkSW5mb1RvRG9tKGhpZ2hlc3Rwcmlvcml0eW9iaiwgXCJwcmlvcml0eVwiKTtcbiAgICB9XG4gIH1cbiAgLy8gc2FtZSB0aGluZyBhcyBwcmlvcml0eSwgYnV0IGZvciBkdWUgZGF0ZVxuICBpZiAob2JqRGF0ZSA9PT0gbnVsbCkge1xuICAgIGlmIChpdGVtLmR1ZURhdGUgIT09IFwiXCIpIHtcbiAgICAgIGFkZEluZm9Ub0RvbShpdGVtLCBcImR1ZWRhdGVcIik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IG9iakluZm9EYXRlSUQgPSBvYmpEYXRlLmdldEF0dHJpYnV0ZShcImlkXCIpO1xuICAgIGNvbnN0IG9iaklEID0gb2JqSW5mb0RhdGVJRC5yZXBsYWNlKFwiaW5mb0RcIiwgXCJcIik7XG4gICAgY29uc3QgY3VycmVudEl0ZW1MaXN0ID0gY3JlYXRlTGlzdC51cGRhdGVJdGVtTGlzdChudWxsLCBudWxsLCBudWxsKTtcbiAgICBsZXQgbmVhcmVzdGR1ZWRhdGVvYmo7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50SXRlbUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRpdGVtID0gY3VycmVudEl0ZW1MaXN0W2ldO1xuICAgICAgaWYgKGN1cnJlbnRpdGVtLml0ZW1JRCA9PT0gb2JqSUQpIHtcbiAgICAgICAgbmVhcmVzdGR1ZWRhdGVvYmogPSBjbG9zZXN0RHVlRGF0ZVNpbmdsZShpdGVtLCBjdXJyZW50aXRlbSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBhZGRJbmZvVG9Eb20obmVhcmVzdGR1ZWRhdGVvYmosIFwiZHVlZGF0ZVwiKTtcbiAgfVxufVxuXG4vL2FmdGVyIHJlbW92aW5nIGEgdGFzaywgYSBwcm9qZWN0IG9yIG1hcmtpbmcgYSB0YXNrIGFzIGZpbmlzaGVkLCBjaGVja3MgdG8gc2VlIGlmIGluZm8gbmVlZHMgdG8gYmUgY2hhbmdlZFxuZnVuY3Rpb24gY2hhbmdlSXRlbU9uSW5mbyh0eXBlKSB7XG4gIGlmICh0eXBlID09PSBcInByaW9yaXR5XCIpIHtcbiAgICBsZXQgb2JqUHJpb3JpdHk7XG4gICAgLy8gYXQgdGhlIHRpbWUgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIGxpc3Qgb2YgaXRlbXMgaGFzIGFscmVhZHkgYmVlbiB1cGRhdGVkOyBsb29rcyBmb3IgYW4gaXRlbSB0byBkaXNwbGF5XG4gICAgY29uc3QgY3VycmVudGl0ZW1zID0gY3JlYXRlTGlzdC51cGRhdGVJdGVtTGlzdChudWxsLCBudWxsLCBudWxsKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgb2JqID0gY3VycmVudGl0ZW1zW2ldO1xuICAgICAgb2JqUHJpb3JpdHkgPSBoaWdoZXN0UHJpb3JpdHkoY3VycmVudGl0ZW1zLCBvYmpQcmlvcml0eSk7XG4gICAgfVxuICAgIGlmIChvYmpQcmlvcml0eSAhPT0gdW5kZWZpbmVkICYmIG9ialByaW9yaXR5LnByaW9yaXR5ICE9PSBcIjFcIikge1xuICAgICAgYWRkSW5mb1RvRG9tKG9ialByaW9yaXR5LCBcInByaW9yaXR5XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBubyBpdGVtIGlzIGZvdW5kLCByZW1vdmVzIHRoZSBkaXYgZnJvbSBkb21cbiAgICAgIGNvbnN0IHByaW9yaXR5RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvUHJpb3JpdHlcIik7XG4gICAgICBpZiAocHJpb3JpdHlEaXYgIT09IG51bGwpIHtcbiAgICAgICAgcHJpb3JpdHlEaXYucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBvYmpEdWVEYXRlO1xuICAgIGNvbnN0IGN1cnJlbnRpdGVtcyA9IGNyZWF0ZUxpc3QudXBkYXRlSXRlbUxpc3QobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50aXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG9iaiA9IGN1cnJlbnRpdGVtc1tpXTtcbiAgICAgIG9iakR1ZURhdGUgPSBjbG9zZXN0RHVlRGF0ZShjdXJyZW50aXRlbXMsIG9iakR1ZURhdGUpO1xuICAgIH1cbiAgICBpZiAob2JqRHVlRGF0ZSAhPT0gdW5kZWZpbmVkICYmIG9iakR1ZURhdGUuZHVlRGF0ZSAhPT0gXCJcIikge1xuICAgICAgYWRkSW5mb1RvRG9tKG9iakR1ZURhdGUsIFwiZHVlZGF0ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZHVlZGF0ZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb0R1ZURhdGVcIik7XG4gICAgICBpZiAoZHVlZGF0ZURpdiAhPT0gbnVsbCkge1xuICAgICAgICBkdWVkYXRlRGl2LnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBvbiBwYWdlbG9hZCwgY2hlY2tzIGZvciB0YXNrcyBmcm9tIGxvY2FsIHN0b3JhZ2Ugd2l0aCBwcmlvcml0eSA+IDEgYW5kIGRpc3BsYXlzIGhpZ2hlc3QgcHJpb3J0eSB0YXNrLCBhbmQgZm9yIHRhc2tzIHdpdGggZHVlIGRhdGUgZGVmaW5lZCwgZGlzcGxheWluZyB0aGUgY2xvc2VzdCBkdWUgZGF0ZVxuZnVuY3Rpb24gY2hlY2tJbmZvRnJvbVN0b3JhZ2UoKSB7XG4gIGNvbnN0IHN0b3JlZEl0ZW1zID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgaWYgKHN0b3JlZEl0ZW1zLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IHByb2plY3RzdG9yZWQgPSBzdG9yZWRJdGVtcy5nZXRJdGVtKHN0b3JlZEl0ZW1zLmtleSgwKSk7XG4gICAgY29uc3QgcGFyc2VkanNvbiA9IEpTT04ucGFyc2UocHJvamVjdHN0b3JlZCk7XG4gICAgLy8gaWYgYSBwcm9qZWN0IHN0b3JlZCBkb2Vzbid0IGhhdmUgdGFza3MsIHJldHVyblxuICAgIGlmIChwYXJzZWRqc29uLml0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoc3RvcmVkSXRlbXMubGVuZ3RoICE9IDApIHtcbiAgICBsZXQgb2JqUHJpb3JpdHk7XG4gICAgbGV0IG9iakR1ZURhdGU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdG9yZWRJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcHJvamVjdFN0cmluZyA9IHN0b3JlZEl0ZW1zLmdldEl0ZW0oc3RvcmVkSXRlbXMua2V5KGkpKTtcbiAgICAgIGNvbnN0IHByb2plY3QgPSBKU09OLnBhcnNlKHByb2plY3RTdHJpbmcpO1xuICAgICAgY29uc3QgaXRlbXMgPSBwcm9qZWN0Lml0ZW1zO1xuICAgICAgb2JqUHJpb3JpdHkgPSBoaWdoZXN0UHJpb3JpdHkoaXRlbXMsIG9ialByaW9yaXR5KTtcbiAgICAgIG9iakR1ZURhdGUgPSBjbG9zZXN0RHVlRGF0ZShpdGVtcywgb2JqRHVlRGF0ZSk7XG4gICAgfVxuICAgIGlmIChvYmpQcmlvcml0eSAhPT0gdW5kZWZpbmVkICYmIG9ialByaW9yaXR5LnByaW9yaXR5ICE9PSBcIjFcIikge1xuICAgICAgYWRkSW5mb1RvRG9tKG9ialByaW9yaXR5LCBcInByaW9yaXR5XCIpO1xuICAgIH1cbiAgICBpZiAob2JqRHVlRGF0ZSAhPT0gdW5kZWZpbmVkICYmIG9iakR1ZURhdGUuZHVlRGF0ZSAhPT0gXCJcIikge1xuICAgICAgYWRkSW5mb1RvRG9tKG9iakR1ZURhdGUsIFwiZHVlZGF0ZVwiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkSW5mb1RvRG9tKGl0ZW0sIHR5cGUpIHtcbiAgY29uc3QgaW5mb0RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5mb1wiKTtcbiAgbGV0IGluZm9Qcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb1ByaW9yaXR5XCIpO1xuICBsZXQgaW5mb0RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm9EYXRlXCIpO1xuICBsZXQgY3VycmVudGl0ZW0gPSBpdGVtO1xuICBpZiAodHlwZSA9PT0gXCJwcmlvcml0eVwiKSB7XG4gICAgaWYgKGluZm9Qcmlvcml0eSAhPT0gbnVsbCkge1xuICAgICAgLy8gd2hlbmV2ZXIgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCwgY2hlY2tzIHRvIHNlZSBpZiB0aGVyZSB3YXMgYSBwcmV2aW91cyB0YXNrIGJlaW5nIGRpc3BsYXllZC4gSWYgdHJ1ZSwgcmVtb3ZlcyB0aGUgdGFzay4gV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkLCB3ZSBhbHJlYWR5IGtub3cgdGhhdCB0aGUgY3VycmVudCB0YXNrIGhhcyBhIGhpZ2hlciBwcmlvcml0eVxuICAgICAgaW5mb1ByaW9yaXR5LnJlbW92ZSgpO1xuICAgIH1cbiAgICBpbmZvUHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGluZm9Qcmlvcml0eS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImluZm9Qcmlvcml0eVwiKTtcbiAgICBpbmZvUHJpb3JpdHkuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJpbmZvUFwiICsgaXRlbS5pdGVtSUQpO1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gXCJIaWdoZXN0IFByaW9yaXR5OlwiO1xuICAgIGlmIChpbmZvRGl2Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgaW5mb0Rpdi5pbnNlcnRCZWZvcmUoaW5mb1ByaW9yaXR5LCBpbmZvRGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZm9EaXYuYXBwZW5kQ2hpbGQoaW5mb1ByaW9yaXR5KTtcbiAgICB9XG4gICAgaW5mb1ByaW9yaXR5LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICBhZGRJdGVtVG9Eb21TaW1wbGlmaWVkKGl0ZW0sIGluZm9Qcmlvcml0eSwgXCJoaWdoZXN0UHJpb3JpdHlcIik7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGluZm9EYXRlICE9PSBudWxsKSB7XG4gICAgICBpbmZvRGF0ZS5yZW1vdmUoKTtcbiAgICB9XG4gICAgaW5mb0RhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGluZm9EYXRlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiaW5mb0RhdGVcIik7XG4gICAgaW5mb0RhdGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJpbmZvRFwiICsgaXRlbS5pdGVtSUQpO1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gXCJDbG9zZXN0IERlYWRsaW5lOlwiO1xuICAgIGluZm9EaXYuYXBwZW5kQ2hpbGQoaW5mb0RhdGUpO1xuICAgIGluZm9EYXRlLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICBhZGRJdGVtVG9Eb21TaW1wbGlmaWVkKGl0ZW0sIGluZm9EYXRlLCBcImNsb3Nlc3RkdWVkYXRlXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVQcm9qZWN0IH0gZnJvbSBcIi4vY3JlYXRlUHJvamVjdC5qc1wiO1xuaW1wb3J0IHtcbiAgY3JlYXRpb25UaW1lLFxuICBjcmVhdGVMaXN0LFxuICByZW1vdmVBbGxJdGVtc0Zyb21Qcm9qZWN0LFxuICBjcmVhdGVDaGVja0xpc3RPYmplY3QsXG59IGZyb20gXCIuL2NyZWF0ZVRvRG8uanNcIjtcbmltcG9ydCB7IG9uQWRkQ2hlY2tGb3JDaGFuZ2VzT25JbmZvLCBjaGFuZ2VJdGVtT25JbmZvIH0gZnJvbSBcIi4vaW5mby5qc1wiO1xuaW1wb3J0IHsgb3JkZXJUYXNrc1AsIG9yZGVyVGFza3NEIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IHtcbiAgbWFuYWdlRG9tLFxuICBhZGRJdGVtVG9Eb21TaW1wbGlmaWVkLFxuICBhZGRJdGVtVG9Eb20sXG4gIHN0eWxlSXRlbSxcbiAgc2hvd09ySGlkZURpdnMsXG59O1xuXG4vL2dldHMgcHJvamVjdHMgYW5kIHRhc2tzIGZyb20gc3RvcmFnZSBhbmQgZGlzcGxheXMgb24gcGFnZVxud2luZG93Lm9ubG9hZCA9IHJldHJpZXZlSXRlbXNGcm9tU3RvcmFnZSgpO1xuXG4vLyBjcmVhdGVzIGFkZHByb2plY3QgYnV0dG9uIHdpdGggZXZlbnQgbGlzdGVuZXIgYWRkcHJvamVjdCBmdW5jdGlvblxuZnVuY3Rpb24gbWFuYWdlRG9tKCkge1xuICBjb25zdCBkaXZDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50XCIpO1xuICBjb25zdCBhZGRQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgYWRkUHJvamVjdEJ1dHRvbi5pbm5lckhUTUwgPVxuICAgICc8aSBjbGFzcz1cImxhcyBsYS1mb2xkZXItcGx1c1wiPjwvaT48c3Bhbj4gTmV3IFByb2plY3Q8L3NwYW4+JztcbiAgYWRkUHJvamVjdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImFkZG5ld3Byb2plY3RcIik7XG4gIGNvbnN0IGRpdkFkZFByb2plY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluZm9cIik7XG4gIGRpdkFkZFByb2plY3QuYXBwZW5kQ2hpbGQoYWRkUHJvamVjdEJ1dHRvbik7XG4gIGNvbnN0IHN0b3JlZEl0ZW1zID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgLy8gaWYgdGhlcmUgYXJlIG5vdyBwcm9qZWN0cyBpbiBzdG9yYWdlLCBjcmVhdGVzIGFuIGVtcHR5IGRlZmF1bHQgbGlzdFxuICBpZiAoc3RvcmVkSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgYWRkUHJvamVjdChcImRlZmF1bHRcIik7XG4gIH1cblxuICBhZGRQcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgYWRkUHJvamVjdChudWxsKTtcbiAgfSk7XG59XG5cbi8vIGFkZHMgcHJvamVjdCB0byBwYWdlIHdpdGggYSB1bmlxdWUgSUQgYW5kIGEgdGl0bGUgcHJvdmlkZWQgYnkgdGhlIHVzZXIgd2l0aCBhIHByb21wdC4gY2hlY2tzIGZvciB0aGUgbnVtYmVyIG9mIHByb2plY3REaXZzIGFuZCBhZGRzIDEgdG8gdGhhdCBudW1iZXJcbmZ1bmN0aW9uIGFkZFByb2plY3Qob2JqKSB7XG4gIGNvbnN0IGRpdkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIik7XG4gIGNvbnN0IGRpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZGl2I2NvbnRlbnQgPiBkaXYucHJvamVjdERpdlwiKTtcbiAgbGV0IGxhcmdlc3RJRCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGl2cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBkaXZJRCA9IGRpdnNbaV0uaWQ7XG4gICAgbGV0IHByb2plY3ROdW1iZXIgPSBkaXZJRC5yZXBsYWNlKFwicHJvamVjdFwiLCBcIlwiKTtcbiAgICBpZiAobGFyZ2VzdElEIDwgcHJvamVjdE51bWJlcikge1xuICAgICAgbGFyZ2VzdElEID0gcHJvamVjdE51bWJlcjtcbiAgICB9XG4gIH1cbiAgY29uc3QgbnVtYmVyT2ZQcm9qZWN0cyA9IE51bWJlcihsYXJnZXN0SUQpICsgMTtcbiAgY29uc3QgY3JlYXRlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgbGV0IHByb2plY3RUaXRsZTtcbiAgbGV0IHByb2plY3ROYW1lO1xuICBpZiAob2JqID09PSBudWxsICYmIG9iaiAhPT0gXCJkZWZhdWx0XCIpIHtcbiAgICBwcm9qZWN0VGl0bGUgPSB3aW5kb3cucHJvbXB0KFwiUHJvamVjdCBOYW1lOlwiKTtcbiAgICBwcm9qZWN0TmFtZSA9IFwicHJvamVjdFwiICsgbnVtYmVyT2ZQcm9qZWN0cztcbiAgICBpZiAocHJvamVjdFRpdGxlID09PSBudWxsIHx8IHByb2plY3RUaXRsZSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvYmogPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgcHJvamVjdFRpdGxlID0gXCJEZWZhdWx0IExpc3RcIjtcbiAgICBwcm9qZWN0TmFtZSA9IFwicHJvamVjdDBcIjtcbiAgfSBlbHNlIHtcbiAgICBwcm9qZWN0VGl0bGUgPSBvYmoubmFtZTtcbiAgICBwcm9qZWN0TmFtZSA9IG9iai5uYW1lO1xuICB9XG5cbiAgLy8gY2FsbHMgdGhlIHByb2plY3Rjb2xsZWN0aW9uIG9mIGNyZWF0ZXByb2plY3QgZnVuY3Rpb24sIHRoYXQgdXNlcyBhIGNvbnN0cnVjdG9yOyB0aGUgcHJvamVjdCBpcyBjcmVhdGVkIHdpdGhvdXQgYW55IGl0ZW1zXG4gIGNvbnN0IGNyZWF0ZU5ld1Byb2plY3QgPSBjcmVhdGVQcm9qZWN0LnByb2plY3RDb2xsZWN0aW9uKFxuICAgIHByb2plY3RUaXRsZSxcbiAgICBwcm9qZWN0TmFtZVxuICApO1xuICAvLyBkaXNwbGF5cyBwcm9qZWN0cyBvbiBwYWdlXG4gIGNvbnN0IHByb2plY3RIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBwcm9qZWN0SGVhZGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicHJvamVjdEhlYWRlclwiKTtcbiAgY29uc3QgY2xvc2Vwcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY2xvc2Vwcm9qZWN0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiY2xvc2Vwcm9qZWN0ZGl2XCIpO1xuICBjb25zdCB0aXRsZVBhcmEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XG4gIHRpdGxlUGFyYS50ZXh0Q29udGVudCA9IGNyZWF0ZU5ld1Byb2plY3QudGl0bGU7XG4gIGNyZWF0ZURpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBwcm9qZWN0TmFtZSk7XG4gIGNyZWF0ZURpdi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInByb2plY3REaXZcIik7XG4gIGRpdkNvbnRlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRGl2KTtcbiAgY3JlYXRlRGl2LmFwcGVuZENoaWxkKGNsb3NlcHJvamVjdCk7XG4gIGNyZWF0ZURpdi5hcHBlbmRDaGlsZChwcm9qZWN0SGVhZGVyKTtcbiAgcHJvamVjdEhlYWRlci5hcHBlbmRDaGlsZCh0aXRsZVBhcmEpO1xuICBjb25zdCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJvamVjdE5hbWUpO1xuICAvLyBjcmVhdGVzIGJ1dHRvbiBmb3IgYWRkaW5nIHRhc2tzIHRvIHByb2plY3RcbiAgYWRkSXRlbUJ1dHRvbihwcm9qZWN0RGl2KTtcblxuICAvLyBjcmVhdGVzIDIgYnV0dG9ucyBmb3IgZGVsZXRpbmcgcHJvamVjdHM6IDEgYXMgYSBjcm9zcyBvbiB0b3AgcmlnaHQgY29ybmVyLGFuZCAxIHdpdGggYSBiYXNrZXQgbmV4dCB0byB0aGUgcHJvamVjdCB0aXRsZVxuICBjb25zdCBjbG9zZXByb2plY3RidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjbG9zZXByb2plY3RidXR0b24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjbG9zZVByb2plY3RcIik7XG4gIGNsb3NlcHJvamVjdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIkRlbGV0ZSBQcm9qZWN0XCIpO1xuICBjbG9zZXByb2plY3RidXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwibGFyIGxhLXdpbmRvdy1jbG9zZVwiPjwvaT4nO1xuICBjbG9zZXByb2plY3RidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVQcm9qZWN0KHByb2plY3ROYW1lKTtcbiAgfSk7XG5cbiAgY2xvc2Vwcm9qZWN0LmFwcGVuZENoaWxkKGNsb3NlcHJvamVjdGJ1dHRvbik7XG4gIGNvbnN0IHJlbW92ZVByb2plY3RCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICByZW1vdmVQcm9qZWN0QnV0dG9uLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicmVtb3ZlUHJvamVjdFwiKTtcbiAgcmVtb3ZlUHJvamVjdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIkRlbGV0ZSBQcm9qZWN0XCIpO1xuICByZW1vdmVQcm9qZWN0QnV0dG9uLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImxhcyBsYS10cmFzaFwiPjwvaT4nO1xuICByZW1vdmVQcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmVtb3ZlUHJvamVjdChwcm9qZWN0TmFtZSk7XG4gIH0pO1xuICBwcm9qZWN0SGVhZGVyLmFwcGVuZENoaWxkKHJlbW92ZVByb2plY3RCdXR0b24pO1xuXG4gIC8vIGFkZHMgYnV0dG9ucyBmb3Igc29ydGluZyB0YXNrcyBieSBwcmlvcml0eSBhbmQgZHVlIGRhdGVcbiAgY29uc3QgcHJvamVjdFNvcnRCdXR0b25QID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgcHJvamVjdFNvcnRCdXR0b25QLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic29ydFByb2plY3RcIik7XG4gIHByb2plY3RTb3J0QnV0dG9uUC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlNvcnQgYnkgUHJpb3JpdHlcIik7XG4gIHByb2plY3RTb3J0QnV0dG9uUC5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJsYXMgbGEtc29ydC11cFwiPjwvaT48c3Bhbj5QPC9zcGFuPic7XG5cbiAgcHJvamVjdFNvcnRCdXR0b25QLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgb3JkZXJUYXNrc1AocHJvamVjdE5hbWUpO1xuICB9KTtcbiAgcHJvamVjdEhlYWRlci5hcHBlbmRDaGlsZChwcm9qZWN0U29ydEJ1dHRvblApO1xuICBjb25zdCBwcm9qZWN0U29ydEJ1dHRvbkQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBwcm9qZWN0U29ydEJ1dHRvbkQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJzb3J0UHJvamVjdFwiKTtcbiAgcHJvamVjdFNvcnRCdXR0b25ELnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiU29ydCBieSBEdWUgRGF0ZVwiKTtcbiAgcHJvamVjdFNvcnRCdXR0b25ELmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImxhcyBsYS1zb3J0LXVwXCI+PC9pPjxzcGFuPkQ8L3NwYW4+JztcbiAgcHJvamVjdFNvcnRCdXR0b25ELmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgb3JkZXJUYXNrc0QocHJvamVjdE5hbWUpO1xuICB9KTtcbiAgcHJvamVjdEhlYWRlci5hcHBlbmRDaGlsZChwcm9qZWN0U29ydEJ1dHRvbkQpO1xuXG4gIC8vIGFkZHMgYnV0dG9uIHRvIGV4cGFuZCBhbGwgdGFza3Mgb24gcHJvamVjdFxuICBjb25zdCBwcm9qZWN0RXhwYW5kQWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgcHJvamVjdEV4cGFuZEFsbC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImV4cGFuZGFsbFwiKTtcbiAgcHJvamVjdEV4cGFuZEFsbC5jbGFzc0xpc3QuYWRkKFwiY29sbGFwc2VkXCIpO1xuICBwcm9qZWN0RXhwYW5kQWxsLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiRXhwYW5kIEFsbFwiKTtcbiAgcHJvamVjdEV4cGFuZEFsbC5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJsYXMgbGEtYW5nbGUtZG91YmxlLWRvd25cIj48L2k+JztcbiAgcHJvamVjdEV4cGFuZEFsbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc3QgY2xpY2tlZHByb2plY3RDaGlsZERpdiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZTtcbiAgICBjb25zdCBjbGlja2VkcHJvamVjdCA9IGNsaWNrZWRwcm9qZWN0Q2hpbGREaXYucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICBjb25zdCBhbGxwcm9qZWN0cyA9IGNyZWF0ZVByb2plY3QucHJvamVjdHNDcmVhdGVkO1xuICAgIGxldCBpdGVtYXJyYXk7XG4gICAgYWxscHJvamVjdHMuZm9yRWFjaChmdW5jdGlvbiAocHJvamVjdCkge1xuICAgICAgaWYgKHByb2plY3QubmFtZSA9PT0gY2xpY2tlZHByb2plY3QpIHtcbiAgICAgICAgaXRlbWFycmF5ID0gcHJvamVjdC5pdGVtcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBlYWNoIHRhc2sgaGFzIGEgY2xhc3Mgb2YgZXhwYW5kZWQgb3IgY29sbGFwc2VkIHdoaWNoIGlzIHN3aXRjaGVkIGFjY29yZGluZ2x5XG4gICAgaWYgKHByb2plY3RFeHBhbmRBbGwuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY29sbGFwc2VkXCIpKSB7XG4gICAgICBpdGVtYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4gc2hvd09ySGlkZURpdnMoaXRlbSwgXCJzaG93XCIpKTtcbiAgICAgIHByb2plY3RFeHBhbmRBbGwuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgXCJDb2xsYXBzZSBBbGxcIik7XG4gICAgICBwcm9qZWN0RXhwYW5kQWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJjb2xsYXBzZWRcIik7XG4gICAgICBwcm9qZWN0RXhwYW5kQWxsLmNsYXNzTGlzdC5hZGQoXCJleHBhbmRlZFwiKTtcbiAgICAgIHByb2plY3RFeHBhbmRBbGwuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwibGFzIGxhLWFuZ2xlLWRvdWJsZS11cFwiPjwvaT4nO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4gc2hvd09ySGlkZURpdnMoaXRlbSwgXCJoaWRlXCIpKTtcbiAgICAgIHByb2plY3RFeHBhbmRBbGwuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgXCJFeHBhbmQgQWxsXCIpO1xuICAgICAgcHJvamVjdEV4cGFuZEFsbC5jbGFzc0xpc3QucmVtb3ZlKFwiZXhwYW5kZWRcIik7XG4gICAgICBwcm9qZWN0RXhwYW5kQWxsLmNsYXNzTGlzdC5hZGQoXCJjb2xsYXBzZWRcIik7XG4gICAgICBwcm9qZWN0RXhwYW5kQWxsLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImxhcyBsYS1hbmdsZS1kb3VibGUtZG93blwiPjwvaT4nO1xuICAgIH1cbiAgfSk7XG4gIHByb2plY3RIZWFkZXIuYXBwZW5kQ2hpbGQocHJvamVjdEV4cGFuZEFsbCk7XG59XG5cbi8vIGNyZWF0ZXMgYnV0dG9uIGZvciBhZGRpbmcgaXRlbXMgdG8gcHJvamVjdDsgdGhlIGJ1dHRvbiBoYXMgYW4gSUQgdGhhdCByZWxhdGVkIHRvIHRoZSBwcm9qZWN0IGRpdiBpdCBpIG9uLlxuZnVuY3Rpb24gYWRkSXRlbUJ1dHRvbihwcm9qZWN0RGl2KSB7XG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGNvbnN0IGJ1dHRvbm5hbWUgPSBcImJ1dHRvblwiICsgcHJvamVjdERpdi5pZDtcbiAgYnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIGJ1dHRvbm5hbWUpO1xuICBidXR0b24uc2V0QXR0cmlidXRlKFwibmFtZVwiLCBwcm9qZWN0RGl2LmlkKTtcbiAgYnV0dG9uLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiQWRkIG5ldyBpdGVtXCIpO1xuICBidXR0b24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJhZGRJdGVtXCIpO1xuICBidXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwibGFzIGxhLXBsdXMtc3F1YXJlXCI+PC9pPic7XG4gIHByb2plY3REaXYuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudHMgdXNlciBmcm9tIGFkZGluZyBpdGVtcyBvbiBtb3JlIHRoYW4gb25lIHByb2plY3QgYXQgYSB0aW1lXG4gICAgY29uc3QgZm9ybURpdkFscmVhZHlFeGlzdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1EaXZcIik7XG4gICAgaWYgKGZvcm1EaXZBbHJlYWR5RXhpc3RzICE9PSBudWxsICYmIGZvcm1EaXZBbHJlYWR5RXhpc3RzLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoNFwiKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IFwiTmV3IEl0ZW1cIjtcbiAgICBwcm9qZWN0RGl2LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAvLyBkaXNwbGF5cyBmb3JtIGZvciBhZGRpbmcgbmV3IGl0ZW1cbiAgICBhZGRJdGVtRm9ybShwcm9qZWN0RGl2LCBcIm5ld1wiKTtcbiAgICAvLyByZWNlaXZlcyB0aGUgaW5wdXQgdGhlIHVzZXIgcHJvdmlkZWQgYW5kIGRpc3BsYXlzIHRoZSB0YXNrIGNyZWF0ZWRcbiAgICBmb3JtSGFuZGxlcihwcm9qZWN0RGl2KTtcbiAgfSk7XG59XG5cbi8vIGFmdGVyIGFkZGluZyBhIG5ldyB0YXNrLCB0aGUgYWRkIGl0ZW0gYnV0dG9uIGlzIG1vdmVkIHRvIHRoZSBlbmQgb2YgdGhlIHRhc2sgbGlzdFxuZnVuY3Rpb24gbW92ZUFkZEJ1dHRvbihkaXYpIHtcbiAgaWYgKGRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSA9PT0gXCJpdGVtRGl2XCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYnV0dG9uID0gZGl2LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkSXRlbVwiKTtcbiAgZGl2LnJlbW92ZUNoaWxkKGJ1dHRvbik7XG4gIGRpdi5hcHBlbmRDaGlsZChidXR0b24pO1xufVxuXG4vLyBvbiBmb3JtIHN1Ym1pdCwgY3JlYXRlcyBhIG5ldyBpdGVtIHdpdGggdGhlIGNvbnN0cnVjdG9yIGRlZmluZWQgaW4gY3JlYXRlTGlzdFxuZnVuY3Rpb24gZm9ybUhhbmRsZXIocHJvamVjdERpdikge1xuICBjb25zdCBjYW5jZWxCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbmNlbEFkZFwiKTtcbiAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaWYgdXNlciBwcmVzc2VzIGNhbmNlbCwgcmVtb3ZlcyBmb3JtIGZyb20gZG9tXG4gICAgY29uc3QgY3VycmVudEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvcm1cIiArIHByb2plY3REaXYuaWQpO1xuICAgIGN1cnJlbnRGb3JtLnJlbW92ZSgpO1xuICAgIGNvbnN0IHRpdGxlRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoNFwiKTtcbiAgICBpZiAodGl0bGVGb3JtICE9PSBudWxsKSB7XG4gICAgICB0aXRsZUZvcm0ucmVtb3ZlKCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgdGl0bGVGb2N1cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVcIikuZm9jdXMoKTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImZvcm1cIikuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShlLnRhcmdldCk7XG4gICAgLy9wbGFjZXMgaW5mbyBzdWJtaXR0ZWQgb24gZm9ybSBvbiBhbiBhcnJheVxuICAgIGxldCBpdGVtSW5mbyA9IFtdO1xuICAgIGZvciAoY29uc3QgcGFpciBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAgIGl0ZW1JbmZvLnB1c2gocGFpclsxXSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhwYWlyWzBdICsgXCIsIFwiICsgcGFpclsxXSk7XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0ID0gcHJvamVjdERpdi5pZDtcbiAgICBjb25zdCBpdGVtRGl2RXhpc3RpbmcgPSBwcm9qZWN0RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJkaXYuaXRlbURpdlwiKTtcbiAgICBsZXQgaGlnaGVzdEl0ZW1OdW1iZXI7XG4gICAgLy8gZGV0ZXJtaW5lcyB0aGUgaGlnaGVzdCB0YXNrIElEIG9uIHRoZSBjdXJyZW50IHByb2plY3Q7IHRoZSBuZXcgdGFzayB3aWxsIGhhdmUgdGhhdCBJRCsxXG4gICAgaWYgKGl0ZW1EaXZFeGlzdGluZy5sZW5ndGggPT09IDApIHtcbiAgICAgIGhpZ2hlc3RJdGVtTnVtYmVyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtRGl2RXhpc3RpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaWRjb21wbGV0ZSA9IGl0ZW1EaXZFeGlzdGluZ1tpXS5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgY29uc3QgaXRlbXdvcmQgPSBpZGNvbXBsZXRlLmxhc3RJbmRleE9mKFwiaXRlbVwiKTtcbiAgICAgICAgY29uc3QgaWQgPSBpZGNvbXBsZXRlLnNsaWNlKGl0ZW13b3JkICsgNCk7XG4gICAgICAgIGlmIChoaWdoZXN0SXRlbU51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaGlnaGVzdEl0ZW1OdW1iZXIgPSBOdW1iZXIoaWQpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaGlnaGVzdEl0ZW1OdW1iZXIgPCBOdW1iZXIoaWQpICsgMSkge1xuICAgICAgICAgICAgaGlnaGVzdEl0ZW1OdW1iZXIgPSBOdW1iZXIoaWQpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY3JlYXRlcyBuZXcgdGFza1xuICAgIGNvbnN0IG5ld2l0ZW0gPSBjcmVhdGVMaXN0LmNyZWF0ZU5ld0l0ZW0oXG4gICAgICBpdGVtSW5mb1swXSxcbiAgICAgIGl0ZW1JbmZvWzFdLFxuICAgICAgaXRlbUluZm9bMl0sXG4gICAgICBpdGVtSW5mb1szXSxcbiAgICAgIGl0ZW1JbmZvWzRdLFxuICAgICAgaXRlbUluZm9bNV0sXG4gICAgICBpdGVtSW5mb1s2XSxcbiAgICAgIGN1cnJlbnRQcm9qZWN0LFxuICAgICAgaGlnaGVzdEl0ZW1OdW1iZXJcbiAgICApO1xuICAgIC8vIGFkZHMgdGFzayB0byBjb3JyZXNwb25kaW5nIHByb2plY3RcbiAgICBjcmVhdGVQcm9qZWN0LmFkZEl0ZW1Ub1Byb2plY3QoY3VycmVudFByb2plY3QsIG5ld2l0ZW0pO1xuICAgIC8vIGRpc3BsYXlzIHRhc2sgb24gZG9tXG4gICAgYWRkSXRlbVRvRG9tKG5ld2l0ZW0sIHByb2plY3REaXYsIGN1cnJlbnRQcm9qZWN0KTtcbiAgICAvL3VwZGF0ZXMgaW5mbyBvbiBwYWdlXG4gICAgb25BZGRDaGVja0ZvckNoYW5nZXNPbkluZm8obmV3aXRlbSk7XG4gICAgLy9yZW1vdmVzIGZvcm1cbiAgICBjb25zdCBjdXJyZW50Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJmb3JtXCIpO1xuICAgIGN1cnJlbnRGb3JtLnJlbW92ZSgpO1xuICB9KTtcbn1cblxuLy9zaW1pbGFyIHRvIGZvcm1IYW5kbGVyLCBidXQgZmlyc3QgZGVsZXRlcyB0aGUgdGFzayBmcm9tIHRoZSBwcm9qZWN0IGFuZCBmcm9tIHRoZSBsaXN0IG9mIHRhc2tzOyB0aGUgdGFzayBJRCByZW1haW5zIHRoZSBzYW1lXG5mdW5jdGlvbiBmb3JtSGFuZGxlckVkaXQoY3VycmVudERpdikge1xuICBjb25zdCB0aXRsZUZvY3VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKS5mb2N1cygpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZm9ybVwiKS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGUudGFyZ2V0KTtcbiAgICBsZXQgaXRlbUluZm8gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgZm9ybURhdGEuZW50cmllcygpKSB7XG4gICAgICBpdGVtSW5mby5wdXNoKHBhaXJbMV0pO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50SXRlbUxpc3QgPSBjcmVhdGVMaXN0LnVwZGF0ZUl0ZW1MaXN0KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGxldCBjdXJyZW50SXRlbTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRJdGVtTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudEl0ZW0gPSBjdXJyZW50SXRlbUxpc3RbaV07XG4gICAgICBpZiAoY3VycmVudEl0ZW0uaXRlbUlEID09PSBjdXJyZW50RGl2LmlkKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyByZW1vdmVzIHRhc2sgZnJvbSBwcm9qZWN0IGFuZCBmcm9tIGxpc3Qgb2YgdGFza3MgYW5kIHJlbW92ZXMgdGFzayBmcm9tIGRvbVxuICAgIGNyZWF0ZVByb2plY3QucmVtb3ZlSXRlbUZyb21Qcm9qZWN0KGN1cnJlbnRJdGVtLnByb2plY3QsIGN1cnJlbnRJdGVtKTtcbiAgICBjcmVhdGVMaXN0LnJlbW92ZUl0ZW1Gcm9tTGlzdChjdXJyZW50SXRlbSk7XG4gICAgY3VycmVudERpdi5yZXBsYWNlQ2hpbGRyZW4oKTtcblxuICAgIC8vIGdldHMgdGhlIHVwZGF0ZWQgaW5mb1xuICAgIGN1cnJlbnRJdGVtLnRpdGxlID0gaXRlbUluZm9bMF07XG4gICAgY3VycmVudEl0ZW0uZGVzY3JpcHRpb24gPSBpdGVtSW5mb1sxXTtcbiAgICBjdXJyZW50SXRlbS5kdWVEYXRlID0gaXRlbUluZm9bMl07XG4gICAgY3VycmVudEl0ZW0ucHJpb3JpdHkgPSBpdGVtSW5mb1szXTtcbiAgICBjdXJyZW50SXRlbS5ub3RlcyA9IGl0ZW1JbmZvWzRdO1xuICAgIGN1cnJlbnRJdGVtLnVybCA9IGl0ZW1JbmZvWzVdO1xuICAgIGN1cnJlbnRJdGVtLmNoZWNrTGlzdCA9IGNyZWF0ZUNoZWNrTGlzdE9iamVjdChpdGVtSW5mb1s2XSwgY3VycmVudEl0ZW0uSUQpO1xuXG4gICAgLy8gY3JlYXRlcyBhbmQgYWRkcyB0aGUgdXBkYXRlZCB0YXNrIHRvIHRoZSBjdXJyZW50IHByb2plY3Q7XG4gICAgY3JlYXRlUHJvamVjdC5hZGRJdGVtVG9Qcm9qZWN0KGN1cnJlbnRJdGVtLnByb2plY3QsIGN1cnJlbnRJdGVtKTtcbiAgICBjcmVhdGVMaXN0LnVwZGF0ZUl0ZW1MaXN0KG51bGwsIFwiYWRkXCIsIGN1cnJlbnRJdGVtKTtcbiAgICAvLyBkaXNwbGF5cyB0aGUgdGFzayBvbiBkb20gYW5kIHVwZGF0ZXMgaW5mbzsgcmVtb3ZlcyBmb3JtIGZyb20gcGFnZVxuICAgIGFkZEl0ZW1Ub0RvbShjdXJyZW50SXRlbSwgY3VycmVudERpdiwgY3VycmVudEl0ZW0ucHJvamVjdCk7XG4gICAgb25BZGRDaGVja0ZvckNoYW5nZXNPbkluZm8oY3VycmVudEl0ZW0pO1xuICAgIGNvbnN0IGN1cnJlbnRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImZvcm1cIik7XG4gICAgaWYgKGN1cnJlbnRGb3JtICE9PSBudWxsKSB7XG4gICAgICBjdXJyZW50Rm9ybS5yZW1vdmUoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBjcmVhdGVzIGJ1dHRvbiBmb3IgcmVtb3ZpbmcgdGFza1xuZnVuY3Rpb24gcmVtb3ZlSXRlbUJ1dHRvbihpdGVtLCBkaXYpIHtcbiAgY29uc3Qgc3RvcmVkSXRlbXMgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICBjb25zdCByZW1vdmVJdGVtQnV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgY29uc3QgY3VycmVudEl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtLml0ZW1JRCk7XG4gIHJlbW92ZUl0ZW1CdXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJyZW1vdmVJdGVtXCIpO1xuICByZW1vdmVJdGVtQnV0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiRGVsZXRlIGl0ZW1cIik7XG4gIHJlbW92ZUl0ZW1CdXQuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwibGFzIGxhLXRyYXNoXCI+PC9pPic7XG4gIHJlbW92ZUl0ZW1CdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAvL3JlbW92ZXMgdGFzayBmcm9tIGRvbVxuICAgIGN1cnJlbnRJdGVtLnJlbW92ZSgpO1xuICAgIC8vcmVtb3ZlcyB0YXNrIGZyb20gbGlzdCBvZiB0YXNrc1xuICAgIGNyZWF0ZUxpc3QucmVtb3ZlSXRlbUZyb21MaXN0KGl0ZW0pO1xuICAgIC8vcmVtb3ZlcyB0YXNrIGZyb20gcHJvamVjdFxuICAgIGNyZWF0ZVByb2plY3QucmVtb3ZlSXRlbUZyb21Qcm9qZWN0KGl0ZW0ucHJvamVjdCwgaXRlbSk7XG4gICAgLy8gY2hlY2tzIGlmIGl0J3MgbmVjZXNzYXJ5IHRvIGNoYW5nZSB0YXNrcyBvbiBpbmZvXG4gICAgY2hhbmdlSXRlbU9uSW5mbyhcInByaW9yaXR5XCIpO1xuICAgIGNoYW5nZUl0ZW1PbkluZm8oXCJkdWVkYXRlXCIpO1xuICB9KTtcbiAgZGl2LmFwcGVuZENoaWxkKHJlbW92ZUl0ZW1CdXQpO1xufVxuXG5mdW5jdGlvbiBhZGRJdGVtVG9Eb20oaXRlbSwgcHJvamVjdERpdiwgcHJvamVjdElEKSB7XG4gIGxldCBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtLml0ZW1JRCk7XG4gIGlmIChkaXYgPT09IG51bGwpIHtcbiAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcIml0ZW1EaXZcIik7XG4gICAgZGl2LnNldEF0dHJpYnV0ZShcImlkXCIsIGl0ZW0uaXRlbUlEKTtcbiAgICBwcm9qZWN0RGl2LmFwcGVuZENoaWxkKGRpdik7XG4gIH1cbiAgLy8gcmVtb3ZlcyB0ZW1wb3JhcnkgdGl0bGUgZm9yIGZvcm1cbiAgY29uc3QgdGl0bGVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImg0XCIpO1xuICBpZiAodGl0bGVGb3JtICE9PSBudWxsKSB7XG4gICAgdGl0bGVGb3JtLnJlbW92ZSgpO1xuICB9XG4gIC8vIGNyZWF0ZXMgZG9tIGVsZW1lbnRzXG4gIGNyZWF0ZURvbUVsZW1lbnRzKGl0ZW0sIGRpdiwgcHJvamVjdElEKTtcbiAgLy8gY3JlYXRlcyBldmVudCBsaXN0ZW5lciB0YXNrIHN0YXR1cywgc28gdGhhdCB0aGUgdXNlciBjYW4gbWFyayB0YXNrIGFzIGZpbmlzaGVkXG4gIGNvbnN0IGl0ZW1TdGF0dXNTcGFuID0gZGl2LnF1ZXJ5U2VsZWN0b3IoXCIuc3RhdHVzU3BhblwiKTtcbiAgaXRlbVN0YXR1c1NwYW4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBtYXJrSXRlbUFzRG9uZShpdGVtKTtcbiAgfSk7XG4gIC8vIGFmdGVyIGFkZGluZyBpdGVtIHRvIGRvbSwgaXRlbSBpcyBleHBhbmRlZFxuICBzaG93T3JIaWRlRGl2cyhpdGVtLCBcInNob3dcIik7XG4gIGNvbnN0IGl0ZW1FeHBhbmQgPSBkaXYucXVlcnlTZWxlY3RvcihcIi5pdGVtRXhwYW5kXCIpO1xuICAvL2FkZHMgZXZlbnQgbGlzdGVuZXIgc28gdGhhdCB0aGUgdXNlciBjYW4gY29sbGFwc2UgdGFza1xuICBpdGVtRXhwYW5kLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpIHtcbiAgICAgIHNob3dPckhpZGVEaXZzKGl0ZW0sIFwic2hvd1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd09ySGlkZURpdnMoaXRlbSwgXCJoaWRlXCIpO1xuICAgIH1cbiAgfSk7XG4gIC8vIGFkZHMgcmVtb3ZlIGFuZCBlZGl0IGJ1dHRvbiB0byB0YXNrXG4gIGNvbnN0IGl0ZW1Gb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBpdGVtRm9vdGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiaXRlbUZvb3RlclwiKTtcbiAgY29uc3QgaXRlbURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0uaXRlbUlEKTtcbiAgaXRlbURpdi5hcHBlbmRDaGlsZChpdGVtRm9vdGVyKTtcbiAgcmVtb3ZlSXRlbUJ1dHRvbihpdGVtLCBpdGVtRm9vdGVyKTtcbiAgZWRpdEl0ZW1CdXR0b24oaXRlbSwgaXRlbUZvb3RlciwgcHJvamVjdERpdik7XG4gIGNvbnN0IG5ld3Byb2plY3RkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtLnByb2plY3QpO1xuICBtb3ZlQWRkQnV0dG9uKG5ld3Byb2plY3RkaXYpO1xufVxuXG4vLyBzaW1pbGFyIHRvIHByZXZpb3VzIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCBvZiB1c2luZyBjcmVhdGVkb21lbGVtZW50IHRvIHNob3cgYWxsIHRoZSBhdmFpbGFibGUgaW5mb3JtYXRpb24gb24gYSB0YXNrLCBvbmx5IHNob3dzIHNvbWU7IHRvIGJlIHVzZWQgb24gdGhlIGluZm8gc2VjdGlvblxuZnVuY3Rpb24gYWRkSXRlbVRvRG9tU2ltcGxpZmllZChpdGVtLCBjdXJyZW50RGl2LCB0eXBlKSB7XG4gIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBkaXYuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJpdGVtRGl2XCIpO1xuICBkaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgdHlwZSk7XG4gIGN1cnJlbnREaXYuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICBjb25zdCBpdGVtSGVhZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgaXRlbVRpdGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgaXRlbURlc2NyaXB0aW9uRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgaXRlbUR1ZURhdGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBpdGVtUHJpb3JpdHlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gIGNvbnN0IGRpdnMgPSBbXG4gICAgaXRlbUhlYWRlckRpdixcbiAgICBpdGVtVGl0bGVEaXYsXG4gICAgaXRlbURlc2NyaXB0aW9uRGl2LFxuICAgIGl0ZW1EdWVEYXRlRGl2LFxuICAgIGl0ZW1Qcmlvcml0eURpdixcbiAgXTtcbiAgY29uc3QgY2xhc3NlcyA9IFtcbiAgICBcIml0ZW1IZWFkZXJcIixcbiAgICBcIml0ZW1UaXRsZVwiLFxuICAgIFwiaXRlbURlc2NyaXB0aW9uXCIsXG4gICAgXCJpdGVtRHVlRGF0ZVwiLFxuICAgIFwiaXRlbVByaW9yaXR5XCIsXG4gIF07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXZzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGl2c1tpXS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBjbGFzc2VzW2ldKTtcbiAgfVxuXG4gIGl0ZW1Qcmlvcml0eURpdi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlByaW9yaXR5XCIpO1xuICBjb25zdCBpdGVtVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gIGNvbnN0IGl0ZW1EZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCBpdGVtRHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCBpdGVtUHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcblxuICBpdGVtVGl0bGUudGV4dENvbnRlbnQgPSBpdGVtLnRpdGxlO1xuICBpZiAoaXRlbS5kZXNjcmlwdGlvbiAhPSBcIlwiKSB7XG4gICAgaXRlbURlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gXCJEZXNjcmlwdGlvbjogXCIgKyBpdGVtLmRlc2NyaXB0aW9uO1xuICB9XG4gIGlmIChpdGVtLmR1ZURhdGUgIT0gXCJcIikge1xuICAgIGl0ZW1EdWVEYXRlLnRleHRDb250ZW50ID0gXCJEdWU6IFwiICsgaXRlbS5kdWVEYXRlO1xuICB9XG4gIGlmIChpdGVtLnByaW9yaXR5ICE9IFwiXCIpIHtcbiAgICBpdGVtUHJpb3JpdHkuaW5uZXJIVE1MID1cbiAgICAgICc8aSBjbGFzcz1cImxhcyBsYS1leGNsYW1hdGlvblwiPjwvaT4nICsgaXRlbS5wcmlvcml0eTtcbiAgfVxuICBpdGVtUHJpb3JpdHlEaXYuY2xhc3NMaXN0LmFkZChcInByaW9yaXR5XCIgKyBpdGVtLnByaW9yaXR5KTtcbiAgY29uc3QgZGl2Q2hpbGRyZW4gPSBbaXRlbUhlYWRlckRpdiwgaXRlbURlc2NyaXB0aW9uRGl2LCBpdGVtRHVlRGF0ZURpdl07XG5cbiAgZm9yIChsZXQgaiA9IDA7IGogPCBkaXZDaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgIGRpdi5hcHBlbmRDaGlsZChkaXZDaGlsZHJlbltqXSk7XG4gIH1cbiAgaXRlbUhlYWRlckRpdi5hcHBlbmRDaGlsZChpdGVtVGl0bGVEaXYpO1xuICBpdGVtSGVhZGVyRGl2LmFwcGVuZENoaWxkKGl0ZW1Qcmlvcml0eURpdik7XG4gIGl0ZW1UaXRsZURpdi5hcHBlbmRDaGlsZChpdGVtVGl0bGUpO1xuICBpdGVtUHJpb3JpdHlEaXYuYXBwZW5kQ2hpbGQoaXRlbVByaW9yaXR5KTtcbiAgaXRlbURlc2NyaXB0aW9uRGl2LmFwcGVuZENoaWxkKGl0ZW1EZXNjcmlwdGlvbik7XG4gIGl0ZW1EdWVEYXRlRGl2LmFwcGVuZENoaWxkKGl0ZW1EdWVEYXRlKTtcbn1cblxuLy8gY3JlYXRlcyBkb20gZWxlbWVudHMgdG8gZGlzcGxheSB0YXNrIGluZm9ybWF0aW9uXG5mdW5jdGlvbiBjcmVhdGVEb21FbGVtZW50cyhpdGVtLCBkaXYsIHByb2plY3RJRCkge1xuICAvLyBlYWNoIHBpZWNlIG9mIGluZm9ybWF0aW9uIGhhcyBpdHMgb3duIGRpdlxuICBjb25zdCBpdGVtSGVhZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgaXRlbVRpdGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgaXRlbUV4cGFuZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGl0ZW1TdGF0dXNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBpdGVtRGVzY3JpcHRpb25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBpdGVtRHVlRGF0ZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGl0ZW1Qcmlvcml0eURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGl0ZW1Ob3Rlc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGl0ZW1VcmxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBpdGVtQ2hlY2tMaXN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICBjb25zdCBkaXZzID0gW1xuICAgIGl0ZW1IZWFkZXJEaXYsXG4gICAgaXRlbVRpdGxlRGl2LFxuICAgIGl0ZW1FeHBhbmREaXYsXG4gICAgaXRlbVN0YXR1c0RpdixcbiAgICBpdGVtRGVzY3JpcHRpb25EaXYsXG4gICAgaXRlbUR1ZURhdGVEaXYsXG4gICAgaXRlbVByaW9yaXR5RGl2LFxuICAgIGl0ZW1Ob3Rlc0RpdixcbiAgICBpdGVtVXJsRGl2LFxuICAgIGl0ZW1DaGVja0xpc3REaXYsXG4gIF07XG4gIGNvbnN0IGNsYXNzZXMgPSBbXG4gICAgXCJpdGVtSGVhZGVyXCIsXG4gICAgXCJpdGVtVGl0bGVcIixcbiAgICBcIml0ZW1FeHBhbmRcIixcbiAgICBcIml0ZW1TdGF0dXNcIixcbiAgICBcIml0ZW1EZXNjcmlwdGlvblwiLFxuICAgIFwiaXRlbUR1ZURhdGVcIixcbiAgICBcIml0ZW1Qcmlvcml0eVwiLFxuICAgIFwiaXRlbU5vdGVzXCIsXG4gICAgXCJpdGVtVXJsXCIsXG4gICAgXCJpdGVtQ2hlY2tMaXN0XCIsXG4gIF07XG5cbiAgLy8gc2V0cyBjbGFzcyBmb3IgZWFjaCBkaXZcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXZzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGl2c1tpXS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBjbGFzc2VzW2ldKTtcbiAgfVxuXG4gIGl0ZW1Qcmlvcml0eURpdi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlByaW9yaXR5XCIpO1xuXG4gIGNvbnN0IGl0ZW1UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgY29uc3QgaXRlbUV4cGFuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCBpdGVtU3RhdHVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IGl0ZW1TdGF0dXNTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gIGl0ZW1TdGF0dXNTcGFuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic3RhdHVzU3BhblwiKTtcbiAgY29uc3QgaXRlbURlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IGl0ZW1EdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IGl0ZW1Qcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCBpdGVtTm90ZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgaXRlbVVybFBhcmEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgaXRlbVVybEEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgbGV0IGl0ZW1DaGVja0xpc3Q7XG4gIC8vIGlmIHRoZSB0YXNrIGhhcyBhIGNoZWNrbGlzdCwgZGlzcGxheXMgYSBsaXN0IGJ5IGNhbGxpbmcgbWFrZWxpc3Rmcm9taW5wdXRcbiAgaWYgKGl0ZW0uY2hlY2tMaXN0ICE9PSB1bmRlZmluZWQgJiYgaXRlbS5jaGVja0xpc3QgIT09IFwiXCIpIHtcbiAgICBpdGVtQ2hlY2tMaXN0ID0gbWFrZUxpc3RGcm9tSW5wdXQoaXRlbSwgaXRlbS5jaGVja0xpc3QpO1xuICAgIGNvbnN0IGl0ZW1DaGVja0xpc3RUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGNvbnN0IHRhc2tzID0gY291bnRUYXNrcyhpdGVtKTtcbiAgICBpdGVtQ2hlY2tMaXN0VGl0bGUuaW5uZXJIVE1MID1cbiAgICAgICc8aSBjbGFzcz1cImxhcyBsYS10YXNrc1wiPjwvaT4gVGFza3MgKCcgKyB0YXNrc1swXSArIFwiL1wiICsgdGFza3NbMV0gKyBcIilcIjtcbiAgICBpdGVtQ2hlY2tMaXN0RGl2LmFwcGVuZENoaWxkKGl0ZW1DaGVja0xpc3RUaXRsZSk7XG4gIH0gZWxzZSB7XG4gICAgaXRlbUNoZWNrTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGl0ZW1DaGVja0xpc3QudGV4dENvbnRlbnQgPSBpdGVtLmNoZWNrTGlzdDtcbiAgfVxuXG4gIGl0ZW1UaXRsZS50ZXh0Q29udGVudCA9IGl0ZW0udGl0bGU7XG4gIGlmIChpdGVtLmRlc2NyaXB0aW9uICE9IFwiXCIpIHtcbiAgICBpdGVtRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBcIkRlc2NyaXB0aW9uOiBcIiArIGl0ZW0uZGVzY3JpcHRpb247XG4gIH1cbiAgaXRlbVN0YXR1cy50ZXh0Q29udGVudCA9IFwiTm90IEZpbmlzaGVkXCI7XG4gIGl0ZW1TdGF0dXNTcGFuLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXG4gIGlmIChpdGVtLmR1ZURhdGUgIT0gXCJcIikge1xuICAgIGl0ZW1EdWVEYXRlLnRleHRDb250ZW50ID0gXCJEdWU6IFwiICsgaXRlbS5kdWVEYXRlO1xuICB9XG4gIGlmIChpdGVtLnByaW9yaXR5ICE9IFwiXCIpIHtcbiAgICBpdGVtUHJpb3JpdHkuaW5uZXJIVE1MID1cbiAgICAgICc8aSBjbGFzcz1cImxhcyBsYS1leGNsYW1hdGlvblwiPjwvaT4nICsgaXRlbS5wcmlvcml0eTtcbiAgfVxuICBpdGVtUHJpb3JpdHlEaXYuY2xhc3NMaXN0LmFkZChcInByaW9yaXR5XCIgKyBpdGVtLnByaW9yaXR5KTtcbiAgaWYgKGl0ZW0ubm90ZXMgIT0gXCJcIikge1xuICAgIGl0ZW1Ob3Rlcy50ZXh0Q29udGVudCA9IFwiTm90ZXM6IFwiICsgaXRlbS5ub3RlcztcbiAgfVxuXG4gIGlmIChpdGVtLnVybCAhPT0gXCJcIikge1xuICAgIGl0ZW1VcmxQYXJhLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImxhcyBsYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT4nO1xuICAgIGl0ZW1VcmxQYXJhLmFwcGVuZENoaWxkKGl0ZW1VcmxBKTtcbiAgICBpdGVtVXJsQS50ZXh0Q29udGVudCA9IGl0ZW0udXJsO1xuICAgIGl0ZW1VcmxBLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgaXRlbS51cmwpO1xuICB9XG5cbiAgaXRlbUV4cGFuZC5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJsYXMgbGEtYW5nbGUtZG91YmxlLWRvd25cIj48L2k+JztcblxuICBjb25zdCBkaXZDaGlsZHJlbiA9IFtcbiAgICBpdGVtSGVhZGVyRGl2LFxuICAgIGl0ZW1FeHBhbmREaXYsXG4gICAgaXRlbVN0YXR1c0RpdixcbiAgICBpdGVtRGVzY3JpcHRpb25EaXYsXG4gICAgaXRlbU5vdGVzRGl2LFxuICAgIGl0ZW1VcmxEaXYsXG4gICAgaXRlbUR1ZURhdGVEaXYsXG4gICAgaXRlbUNoZWNrTGlzdERpdixcbiAgXTtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBkaXZDaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgIGRpdi5hcHBlbmRDaGlsZChkaXZDaGlsZHJlbltqXSk7XG4gIH1cblxuICBpdGVtSGVhZGVyRGl2LmFwcGVuZENoaWxkKGl0ZW1UaXRsZURpdik7XG4gIGl0ZW1IZWFkZXJEaXYuYXBwZW5kQ2hpbGQoaXRlbVByaW9yaXR5RGl2KTtcblxuICBpdGVtVGl0bGVEaXYuYXBwZW5kQ2hpbGQoaXRlbVRpdGxlKTtcbiAgaXRlbUV4cGFuZERpdi5hcHBlbmRDaGlsZChpdGVtRXhwYW5kKTtcblxuICBpdGVtUHJpb3JpdHlEaXYuYXBwZW5kQ2hpbGQoaXRlbVByaW9yaXR5KTtcblxuICBpdGVtU3RhdHVzRGl2LmFwcGVuZENoaWxkKGl0ZW1TdGF0dXMpO1xuICBpdGVtU3RhdHVzLmFwcGVuZENoaWxkKGl0ZW1TdGF0dXNTcGFuKTtcblxuICBpdGVtRGVzY3JpcHRpb25EaXYuYXBwZW5kQ2hpbGQoaXRlbURlc2NyaXB0aW9uKTtcbiAgaXRlbUR1ZURhdGVEaXYuYXBwZW5kQ2hpbGQoaXRlbUR1ZURhdGUpO1xuICBpdGVtTm90ZXNEaXYuYXBwZW5kQ2hpbGQoaXRlbU5vdGVzKTtcbiAgaXRlbVVybERpdi5hcHBlbmRDaGlsZChpdGVtVXJsUGFyYSk7XG4gIGl0ZW1DaGVja0xpc3REaXYuYXBwZW5kQ2hpbGQoaXRlbUNoZWNrTGlzdCk7XG59XG5cbi8vIGNyZWF0ZXMgZm9ybSBvbiBkb21cbmZ1bmN0aW9uIGFkZEl0ZW1Gb3JtKHByb2plY3REaXYsIG5ld29yZWRpdCkge1xuICBjb25zdCBmb3JtRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZm9ybURpdi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImZvcm1EaXZcIik7XG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJtZXRob2RcIiwgXCJnZXRcIik7XG4gIGZvcm0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJmb3JtTmV3SXRlbVwiKTtcbiAgY29uc3QgZm9ybUlEID0gXCJmb3JtXCIgKyBwcm9qZWN0RGl2LmlkO1xuICBmb3JtLnNldEF0dHJpYnV0ZShcImlkXCIsIGZvcm1JRCk7XG5cbiAgY29uc3QgZGl2MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdjEuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJmb3JtTmV3SXRlbVwiKTtcbiAgY29uc3QgbGFiZWwxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbDEuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwidGl0bGVcIik7XG4gIGxhYmVsMS5pbm5lckhUTUwgPSBcIlRpdGxlOlwiO1xuICBjb25zdCBpbnB1dDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGlucHV0MS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgaW5wdXQxLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJ0aXRsZVwiKTtcbiAgaW5wdXQxLnNldEF0dHJpYnV0ZShcImlkXCIsIFwidGl0bGVcIik7XG4gIGlucHV0MS5yZXF1aXJlZCA9IHRydWU7XG5cbiAgY29uc3QgZGl2MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdjIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJmb3JtTmV3SXRlbVwiKTtcbiAgY29uc3QgbGFiZWwyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbDIuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwiZGVzY3JpcHRpb25cIik7XG4gIGxhYmVsMi50ZXh0Q29udGVudCA9IFwiRGVzY3JpcHRpb246IFwiO1xuICBjb25zdCBpbnB1dDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGlucHV0Mi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgaW5wdXQyLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJkZXNjcmlwdGlvblwiKTtcbiAgaW5wdXQyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZGVzY3JpcHRpb25cIik7XG5cbiAgLy8gZHVlIGRhdGUgbmVlZHMgdG8gYmUgaGlnaGVyIHRoYW4gdGhlIGRhdGUgb2YgdGFzayBjcmVhdGlvblxuICBjb25zdCBjdXJyZW50VGltZSA9IGNyZWF0aW9uVGltZSgpO1xuICBjb25zdCBkaXYzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2My5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImZvcm1OZXdJdGVtXCIpO1xuICBjb25zdCBsYWJlbDMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIGxhYmVsMy5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJkdWVEYXRlXCIpO1xuICBsYWJlbDMudGV4dENvbnRlbnQgPSBcIkRlYWRsaW5lOiBcIjtcbiAgY29uc3QgaW5wdXQzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBpbnB1dDMuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImRhdGVcIik7XG4gIGlucHV0My5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwiZHVlRGF0ZVwiKTtcbiAgaW5wdXQzLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZHVlRGF0ZVwiKTtcbiAgaW5wdXQzLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiWVlZWS1NTS1ERFwiKTtcbiAgaW5wdXQzLnNldEF0dHJpYnV0ZShcIm1pblwiLCBjdXJyZW50VGltZSk7XG5cbiAgY29uc3QgZGl2NCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdjQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJmb3JtTmV3SXRlbVwiKTtcbiAgY29uc3QgbGFiZWw0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbDQuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwicHJpb3JpdHlcIik7XG4gIGxhYmVsNC50ZXh0Q29udGVudCA9IFwiUHJpb3JpdHk6IFwiO1xuICBjb25zdCBpbnB1dDQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICBpbnB1dDQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInByaW9yaXR5XCIpO1xuICBpbnB1dDQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJwcmlvcml0eVwiKTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IDY7IGkrKykge1xuICAgIGNvbnN0IG5ld1NlbGVjdE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgbmV3U2VsZWN0T3B0aW9uLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGkpO1xuICAgIG5ld1NlbGVjdE9wdGlvbi50ZXh0Q29udGVudCA9IGk7XG4gICAgaW5wdXQ0LmFwcGVuZENoaWxkKG5ld1NlbGVjdE9wdGlvbik7XG4gIH1cblxuICBjb25zdCBkaXY1ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2NS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImZvcm1OZXdJdGVtXCIpO1xuICBjb25zdCBsYWJlbDUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIGxhYmVsNS5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJub3Rlc1wiKTtcbiAgbGFiZWw1LmlubmVySFRNTCA9IFwiTm90ZXM6IDxicj5cIjtcbiAgY29uc3QgaW5wdXQ1ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICBpbnB1dDUuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcIm5vdGVzXCIpO1xuICBpbnB1dDUuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJub3Rlc1wiKTtcbiAgaW5wdXQ1LnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLCBcIjUwMFwiKTtcbiAgaW5wdXQ1LnN0eWxlLnJlc2l6ZSA9IFwibm9uZVwiO1xuXG4gIGNvbnN0IGRpdjkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBkaXY5LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9ybU5ld0l0ZW1cIik7XG4gIGNvbnN0IGxhYmVsOSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgbGFiZWw5LnNldEF0dHJpYnV0ZShcImZvclwiLCBcImxpbmtcIik7XG4gIGxhYmVsOS50ZXh0Q29udGVudCA9IFwiQWRkIGEgbGluazpcIjtcbiAgY29uc3QgaW5wdXQ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBpbnB1dDkuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInVybFwiKTtcbiAgaW5wdXQ5LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJsaW5rXCIpO1xuICBpbnB1dDkuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJsaW5rXCIpO1xuXG4gIGNvbnN0IGRpdjYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBkaXY2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9ybU5ld0l0ZW1cIik7XG4gIGRpdjYuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgXCJTZXBhcmF0ZSBpdGVtcyB3aXRoICc7J1wiKTtcbiAgY29uc3QgbGFiZWw2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbDYuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwiY2hlY2tMaXN0XCIpO1xuICBsYWJlbDYudGV4dENvbnRlbnQgPSBcIkNoZWNrIExpc3Q6IFwiO1xuICBjb25zdCBpbnB1dDYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGlucHV0Ni5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgaW5wdXQ2LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJjaGVja0xpc3RcIik7XG4gIGlucHV0Ni5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImNoZWNrTGlzdFwiKTtcblxuICBjb25zdCBkaXZzID0gW2RpdjEsIGRpdjIsIGRpdjMsIGRpdjQsIGRpdjUsIGRpdjksIGRpdjZdO1xuICBjb25zdCBpbnB1dHMgPSBbaW5wdXQxLCBpbnB1dDIsIGlucHV0MywgaW5wdXQ0LCBpbnB1dDUsIGlucHV0OSwgaW5wdXQ2XTtcbiAgY29uc3QgbGFiZWxzID0gW2xhYmVsMSwgbGFiZWwyLCBsYWJlbDMsIGxhYmVsNCwgbGFiZWw1LCBsYWJlbDksIGxhYmVsNl07XG4gIGRpdnMuZm9yRWFjaChmdW5jdGlvbiAoZGl2LCBpbmRleCkge1xuICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbHNbaW5kZXhdKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXRzW2luZGV4XSk7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChkaXYpO1xuICB9KTtcblxuICBwcm9qZWN0RGl2LmFwcGVuZENoaWxkKGZvcm1EaXYpO1xuICBmb3JtRGl2LmFwcGVuZENoaWxkKGZvcm0pO1xuICBjb25zdCBkaXY3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgZGl2OCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGZvcm1mb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb3JtZm9vdGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9ybWZvb3RlclwiKTtcblxuICAvLyBpZiB0aGUgdGFzayBhbHJlYWR5IGV4aXN0cywgb25seSBzaG93cyBcInNhdmVcIiBidXR0b247IG90aGVyd2lzZSBzaG93cyBBZGQgYW5kIENhbmNlbCBidXR0b25zXG4gIGlmIChuZXdvcmVkaXQgPT09IFwibmV3XCIpIHtcbiAgICBkaXY3LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9ybU5ld0l0ZW1cIik7XG4gICAgY29uc3QgaW5wdXQ3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0Ny5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwic3VibWl0XCIpO1xuICAgIGlucHV0Ny5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIkFkZFwiKTtcbiAgICBkaXY3LmFwcGVuZENoaWxkKGlucHV0Nyk7XG5cbiAgICBkaXY4LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9ybU5ld0l0ZW1cIik7XG4gICAgY29uc3QgaW5wdXQ4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0OC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIGlucHV0OC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIkNhbmNlbFwiKTtcbiAgICBpbnB1dDguc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjYW5jZWxBZGRcIik7XG4gICAgZGl2OC5hcHBlbmRDaGlsZChpbnB1dDgpO1xuICAgIGZvcm1mb290ZXIuYXBwZW5kQ2hpbGQoZGl2Nyk7XG4gICAgZm9ybWZvb3Rlci5hcHBlbmRDaGlsZChkaXY4KTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKGZvcm1mb290ZXIpO1xuICB9IGVsc2Uge1xuICAgIGRpdjcuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJmb3JtTmV3SXRlbVwiKTtcbiAgICBjb25zdCBpbnB1dDcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQ3LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gICAgaW5wdXQ3LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiU2F2ZVwiKTtcbiAgICBkaXY3LmFwcGVuZENoaWxkKGlucHV0Nyk7XG4gICAgZm9ybWZvb3Rlci5hcHBlbmRDaGlsZChkaXY3KTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKGZvcm1mb290ZXIpO1xuICB9XG59XG5cbi8vcmVtb3ZlIHByb2plY3QgZnJvbSBkb20gYW5kIGZyb20gbGlzdCBvZiBwcm9qZWN0czsgdXBkYXRlcyB0YXNrcyBvbiBpbmZvIGlmIG5lY2Vzc2FyeTsgcmVtb3ZlcyBpdGVtIGZyb20gbG9jYWwgc3RvcmFnZVxuZnVuY3Rpb24gcmVtb3ZlUHJvamVjdChkaXZJRCkge1xuICBjb25zdCBjdXJyZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SUQpO1xuICBjb25zdCBjdXJyZW50SXRlbUxpc3QgPSBjcmVhdGVMaXN0LnVwZGF0ZUl0ZW1MaXN0KG51bGwsIG51bGwsIG51bGwpO1xuICBjdXJyZW50RGl2LnJlbW92ZSgpO1xuICBjb25zdCBjdXJyZW50UHJvamVjdEFycmF5ID0gY3JlYXRlUHJvamVjdC5wcm9qZWN0c0NyZWF0ZWQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFByb2plY3RBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwcm9qZWN0ID0gY3VycmVudFByb2plY3RBcnJheVtpXTtcbiAgICBpZiAocHJvamVjdC5uYW1lID09PSBkaXZJRCkge1xuICAgICAgbGV0IHVwZGF0ZWRQcm9qZWN0c0NyZWF0ZWQgPSBjdXJyZW50UHJvamVjdEFycmF5XG4gICAgICAgIC5zbGljZSgwLCBpKVxuICAgICAgICAuY29uY2F0KGN1cnJlbnRQcm9qZWN0QXJyYXkuc2xpY2UoaSArIDEpKTtcbiAgICAgIGNyZWF0ZVByb2plY3QudXBkYXRlUHJvamVjdEFycmF5KHVwZGF0ZWRQcm9qZWN0c0NyZWF0ZWQpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNyZWF0ZUxpc3QucmVtb3ZlQWxsSXRlbXNGcm9tUHJvamVjdChkaXZJRCk7XG4gIGNoYW5nZUl0ZW1PbkluZm8oXCJwcmlvcml0eVwiKTtcbiAgY2hhbmdlSXRlbU9uSW5mbyhcImR1ZWRhdGVcIik7XG4gIGNvbnN0IHN0b3JlZEl0ZW1zID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgZm9yIChsZXQgayA9IDA7IGsgPCBzdG9yZWRJdGVtcy5sZW5ndGg7IGsrKykge1xuICAgIGNvbnN0IHN0b3JlZEl0ZW1LZXkgPSBzdG9yZWRJdGVtcy5rZXkoayk7XG4gICAgaWYgKHN0b3JlZEl0ZW1LZXkgPT09IGRpdklEKSB7XG4gICAgICBzdG9yZWRJdGVtcy5yZW1vdmVJdGVtKHN0b3JlZEl0ZW1LZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlUHJvamVjdC5wcm9qZWN0c0NyZWF0ZWQ7XG59XG5cbi8vIG1hcmsgdGFzayBhcyBjb21wbGV0ZVxuZnVuY3Rpb24gbWFya0l0ZW1Bc0RvbmUoaXRlbSkge1xuICAvLyByZW1vdmVzIHRhc2sgZnJvbSBsaXN0IG9mIHRhc2tzXG4gIGNyZWF0ZUxpc3QucmVtb3ZlSXRlbUZyb21MaXN0KGl0ZW0pO1xuICAvL2NoYW5nZXMgdGFzayBzdGF0dXMgdG8gdHJ1ZVxuICBpdGVtLmRvbmUgPSB0cnVlO1xuICAvLyBpZiB0aGUgdGFzayBhcyBhIGNoZWNrbGlzdCBvZiBzdWJ0YXNrcywgbWFyayB0aG9zZSBhcyBmaW5pc2hlZCB0b29cbiAgbWFya0FsbFRhc2tzQ29tcGxldGUoaXRlbSk7XG4gIC8vIGFkZHMgdGhlIHRhc2sgYmFjayB0byBsaXN0IG9mIHRhc2tzIGFuZCB1cGRhdGVzIHRhc2sgb24gcHJvamVjdCBsaXN0XG4gIGNyZWF0ZUxpc3QudXBkYXRlSXRlbUxpc3QobnVsbCwgXCJhZGRcIiwgaXRlbSk7XG4gIGNyZWF0ZVByb2plY3QuZWRpdEl0ZW1JblByb2plY3QoaXRlbSk7XG4gIC8vIGNoYW5nZXMgdGFzayBhcHBlYXJhbmNlIG9uIGRvbSBhbmQgdXBkYXRlcyBpbmZvIGlmIG5lY2Vzc2FyeVxuICBzdHlsZUl0ZW0oaXRlbSk7XG4gIGNvbnN0IGluZm9EaXZQID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvUHJpb3JpdHlcIik7XG4gIGNvbnN0IGluZm9EaXZEID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvRGF0ZVwiKTtcbiAgaWYgKGluZm9EaXZQICE9PSBudWxsKSB7XG4gICAgY29uc3QgaW5mb0RpdlBpZCA9IGluZm9EaXZQLmdldEF0dHJpYnV0ZShcImlkXCIpO1xuICAgIGNvbnN0IGluZm9EaXZQSXRlbWlkID0gaW5mb0RpdlBpZC5zbGljZSg1KTtcbiAgICBpZiAoaW5mb0RpdlBJdGVtaWQgPT09IGl0ZW0uaXRlbUlEKSB7XG4gICAgICBpbmZvRGl2UC5yZW1vdmUoKTtcbiAgICAgIGNoYW5nZUl0ZW1PbkluZm8oXCJwcmlvcml0eVwiKTtcbiAgICB9XG4gIH1cbiAgaWYgKGluZm9EaXZEICE9PSBudWxsKSB7XG4gICAgY29uc3QgaW5mb0RpdkRpZCA9IGluZm9EaXZELmdldEF0dHJpYnV0ZShcImlkXCIpO1xuICAgIGNvbnN0IGluZm9EaXZESXRlbWlkID0gaW5mb0RpdkRpZC5zbGljZSg1KTtcbiAgICBpZiAoaW5mb0RpdkRJdGVtaWQgPT09IGl0ZW0uaXRlbUlEKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInNpbVwiKTtcbiAgICAgIGluZm9EaXZELnJlbW92ZSgpO1xuICAgICAgY2hhbmdlSXRlbU9uSW5mbyhcImR1ZWRhdGVcIik7XG4gICAgfVxuICB9XG4gIGNvbnN0IGN1cnJlbnREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtLml0ZW1JRCk7XG4gIGNvbnN0IGVkaXRCdXR0b24gPSBjdXJyZW50RGl2LnF1ZXJ5U2VsZWN0b3IoXCIuZWRpdEl0ZW1cIik7XG4gIC8vYWZ0ZXIgYSB0YXNrIGhhcyBiZWVuIG1hcmtlZCBhcyBmaW5pc2hlZCwgaXQgY2FuJ3QgYmUgZWRpdGVkLCBvbmx5IHJlbW92ZWRcbiAgZWRpdEJ1dHRvbi5yZW1vdmUoKTtcbn1cblxuLy8gYSBmaW5pc2hlZCB0YXNrIGFzIGEgc3RhdHVzIHRleHQgb2YgRG9uZSBhbmQgYSBjaGVja2VkIHNxdWFyZVxuZnVuY3Rpb24gc3R5bGVJdGVtKGl0ZW0pIHtcbiAgY29uc3QgaXRlbURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0uaXRlbUlEKTtcbiAgY29uc3QgaXRlbVN0YXR1c0RpdlAgPSBpdGVtRGl2LnF1ZXJ5U2VsZWN0b3IoXCIuaXRlbVN0YXR1cyA+IHBcIik7XG4gIGNvbnN0IGl0ZW1TdGF0dXNEaXZTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gIGl0ZW1TdGF0dXNEaXZTcGFuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic3RhdHVzU3BhbkNvbXBsZXRlXCIpO1xuICBpdGVtU3RhdHVzRGl2UC50ZXh0Q29udGVudCA9IFwiRG9uZSFcIjtcbiAgaXRlbVN0YXR1c0RpdlNwYW4uc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG4gIGl0ZW1TdGF0dXNEaXZTcGFuLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImxhciBsYS1jaGVjay1zcXVhcmVcIj48L2k+JztcbiAgaXRlbVN0YXR1c0RpdlAuYXBwZW5kQ2hpbGQoaXRlbVN0YXR1c0RpdlNwYW4pO1xufVxuXG4vLyBvbiBwYWdlIGxvYWQsIHJldHJpZXZlcyBwcm9qZWN0cyBmcm9tIHN0b3JhZ2UgYW5kIGRpc3BsYXlzIHRoZW0gb24gcGFnZSB3aXRoIGFkZHByb2plY3QgYW5kIGFkZGl0ZW10b2RvbSBmb3IgZWFjaCB0YXNrXG5mdW5jdGlvbiByZXRyaWV2ZUl0ZW1zRnJvbVN0b3JhZ2UoKSB7XG4gIGNvbnN0IHN0b3JlZEl0ZW1zID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgaWYgKHN0b3JlZEl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0b3JlZEl0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgcHJvamVjdE51bWJlciA9IHN0b3JlZEl0ZW1zLmtleShqKS5yZXBsYWNlKFwicHJvamVjdFwiLCBcIlwiKTtcbiAgICAgIGFycmF5LnB1c2gocHJvamVjdE51bWJlcik7XG4gICAgfVxuICAgIGFycmF5LnNvcnQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0b3JlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBqc29uU3RyaW5nID0gc3RvcmVkSXRlbXMuZ2V0SXRlbShcInByb2plY3RcIiArIGFycmF5W2ldKTtcbiAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICBhZGRQcm9qZWN0KG9iaik7XG4gICAgICBjb25zdCBwcm9qZWN0SXRlbXMgPSBvYmouaXRlbXM7XG4gICAgICBjb25zdCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob2JqLm5hbWUpO1xuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBwcm9qZWN0SXRlbXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgY29uc3QgY3VycmVudEl0ZW0gPSBwcm9qZWN0SXRlbXNba107XG4gICAgICAgIGFkZEl0ZW1Ub0RvbShjdXJyZW50SXRlbSwgcHJvamVjdERpdik7XG4gICAgICAgIHNob3dPckhpZGVEaXZzKGN1cnJlbnRJdGVtLCBcImhpZGVcIik7XG4gICAgICAgIGNyZWF0ZUxpc3QudXBkYXRlSXRlbUxpc3QobnVsbCwgXCJhZGRcIiwgY3VycmVudEl0ZW0pO1xuICAgICAgICBpZiAoY3VycmVudEl0ZW0uZG9uZSkge1xuICAgICAgICAgIHN0eWxlSXRlbShjdXJyZW50SXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy9jcmVhdGVzIGVkaXQgYnV0dG9uLCBhZGQgZXZlbnQgbGlzdGVuZXIgYW5kIHByZXZlbnRzIHVzZXIgZnJvbSBlZGl0aW5nIHR3byBpdGVtcyBhdCB0aGUgc2FtZSB0aW1lXG5mdW5jdGlvbiBlZGl0SXRlbUJ1dHRvbihpdGVtLCBmb290ZXJEaXYsIGl0ZW1EaXYpIHtcbiAgaWYgKGl0ZW0uZG9uZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBlZGl0SXRlbUJ1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGVkaXRJdGVtQnV0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZWRpdEl0ZW1cIik7XG4gIGVkaXRJdGVtQnV0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiRWRpdCBpdGVtXCIpO1xuICBlZGl0SXRlbUJ1dC5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJsYXMgbGEtZWRpdFwiPjwvaT4nO1xuICBlZGl0SXRlbUJ1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGZvcm1FeGlzdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZm9ybVwiKTtcbiAgICBpZiAoZm9ybUV4aXN0cyAhPT0gbnVsbCkge1xuICAgICAgYWxlcnQoXCJGaW5pc2ggZWRpdGluZyBvciBjYW5jZWwgcHJldmlvdXMgaXRlbSBmaXJzdC5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWRpdEl0ZW0oaXRlbSk7XG4gIH0pO1xuICBmb290ZXJEaXYuYXBwZW5kQ2hpbGQoZWRpdEl0ZW1CdXQpO1xufVxuXG4vLyBjYWxscyB0aGUgYWRkaXRlbWZvcm0gZnVuY3Rpb24gYW5kIGRpc3BsYXkgdGhlIGZvcm0gd2l0aCBleGlzdGluZyBpdGVtIHZhbHVlczsgY2FsbHMgZm9ybWhhbmRsZXJlZGl0IHRvIGhhbmRsZSBjdXJyZW50IGlucHV0IHZhbHVlc1xuZnVuY3Rpb24gZWRpdEl0ZW0oaXRlbSkge1xuICBjb25zdCBjdXJyZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbS5pdGVtSUQpO1xuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoNFwiKTtcbiAgdGl0bGUudGV4dENvbnRlbnQgPSBcIkVkaXQgSXRlbVwiO1xuICBjdXJyZW50RGl2LmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgYWRkSXRlbUZvcm0oY3VycmVudERpdiwgXCJlZGl0XCIpO1xuICBjb25zdCBpbnB1dFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKTtcbiAgY29uc3QgaW5wdXREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVzY3JpcHRpb25cIik7XG4gIGNvbnN0IGlucHV0RHVlRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHVlRGF0ZVwiKTtcbiAgY29uc3QgaW5wdXRQcmlvcml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJpb3JpdHlcIik7XG4gIGNvbnN0IGlucHV0Tm90ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vdGVzXCIpO1xuICBjb25zdCBpbnB1dFVybCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGlua1wiKTtcbiAgY29uc3QgaW5wdXRDaGVja0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoZWNrTGlzdFwiKTtcbiAgaW5wdXRUaXRsZS52YWx1ZSA9IGl0ZW0udGl0bGU7XG4gIGlucHV0RGVzY3JpcHRpb24udmFsdWUgPSBpdGVtLmRlc2NyaXB0aW9uO1xuICBpbnB1dER1ZURhdGUudmFsdWUgPSBpdGVtLmR1ZURhdGU7XG4gIGlucHV0UHJpb3JpdHkudmFsdWUgPSBpdGVtLnByaW9yaXR5O1xuICBpbnB1dE5vdGVzLnZhbHVlID0gaXRlbS5ub3RlcztcbiAgaW5wdXRVcmwudmFsdWUgPSBpdGVtLnVybDtcbiAgaW5wdXRDaGVja0xpc3QudmFsdWUgPSBjcmVhdGVTdHJpbmdGcm9tVGFza2xpc3QoaXRlbS5jaGVja0xpc3QpO1xuICBmb3JtSGFuZGxlckVkaXQoY3VycmVudERpdik7XG59XG5cbi8vIHdoZW4gZWRpdGluZyBhIHRhc2ssIHRyYW5zZm9ybXMgdGhlIGNoZWNrbGlzdCBiYWNrIHRvIGEgc3RyaW5nXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tVGFza2xpc3QoY2hlY2tMaXN0KSB7XG4gIGNvbnN0IG9ianZhbHVlcyA9IE9iamVjdC52YWx1ZXMoY2hlY2tMaXN0KTtcbiAgY29uc3Qgb2JqdmFsdWVzU3RyaW5nc09ubHkgPSBvYmp2YWx1ZXMuZmlsdGVyKFxuICAgICh0YXNrKSA9PiB0eXBlb2YgdGFzayAhPT0gXCJib29sZWFuXCJcbiAgKTtcbiAgY29uc3Qgc3RyaW5nID0gb2JqdmFsdWVzU3RyaW5nc09ubHkudG9TdHJpbmcoKTtcbiAgY29uc3QgZmluYWxzdHJpbmcgPSBzdHJpbmcucmVwbGFjZUFsbChcIixcIiwgXCI7XCIpO1xuICByZXR1cm4gZmluYWxzdHJpbmc7XG59XG5cbi8vIGNyZWF0ZXMgYSBsaXN0IHVsIGZyb20gb2JqZWN0IG9mIHN1YnRhc2tzOyBnaXZlIHVuaXF1ZSBpZCB0byBlYWNoIGxpXG5mdW5jdGlvbiBtYWtlTGlzdEZyb21JbnB1dChpdGVtLCBjaGVja0xpc3QpIHtcbiAgY29uc3QgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNoZWNrTGlzdCkpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICBsaS50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgbGkuc2V0QXR0cmlidXRlKFwiaWRcIiwga2V5KTtcbiAgICAgIGlmICghY2hlY2tMaXN0W2tleSArIFwiU3RhdHVzXCJdKSB7XG4gICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGFza05vdENvbXBsZXRlXCIpO1xuICAgICAgICAvLyBhZGRzIGV2ZW50bGlzdGVuZXIgdG8gZWFjaCBsaSB0byBtYXJrIHN1YnRhc2sgYXMgY29tcGxldGVcbiAgICAgICAgbGkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIG1hcmtUYXNrQ29tcGxldGUoZXZlbnQsIGxpLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInRhc2tDb21wbGV0ZVwiKTtcbiAgICAgIH1cbiAgICAgIHVsLmFwcGVuZENoaWxkKGxpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVsO1xufVxuXG4vLyBjb3VudCBudW1iZXIgb2Ygc3VidGFza3MgaW4gY2hlY2tsaXN0OyByZXR1cm5zIG51bWJlciBvZiBjb21wbGV0ZWQgc3VidGFza3MgYW5kIHRvdGFsIG51bWJlciBvZiB0YXNrc1xuZnVuY3Rpb24gY291bnRUYXNrcyhpdGVtKSB7XG4gIGNvbnN0IGZ1bGxjaGVja2xpc3QgPSBpdGVtLmNoZWNrTGlzdDtcbiAgY29uc3QgY2hlY2tsaXN0YXJyYXkgPSBPYmplY3QudmFsdWVzKGZ1bGxjaGVja2xpc3QpO1xuICBsZXQgY29tcGxldGVkdGFza3MgPSAwO1xuICBsZXQgdG90YWx0YXNrcyA9IE51bWJlcihjaGVja2xpc3RhcnJheS5sZW5ndGgpIC8gMjtcbiAgY2hlY2tsaXN0YXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gXCJib29sZWFuXCIgJiYgZWxlbWVudCkge1xuICAgICAgKytjb21wbGV0ZWR0YXNrcztcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW2NvbXBsZXRlZHRhc2tzLCB0b3RhbHRhc2tzXTtcbn1cblxuLy8gbWFya3Mgc3VidGFzayBhcyBjb21wbGV0ZSBhbmQgdXBkYXRlcyB0YXNrIG9uIHRhc2sgbGlzdCBhbmQgcHJvamVjdC5cbmZ1bmN0aW9uIG1hcmtUYXNrQ29tcGxldGUoZXZlbnQsIGxpLCBpdGVtKSB7XG4gIGlmIChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgPT09IFwidGFza0NvbXBsZXRlXCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnQudGFyZ2V0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGFza0NvbXBsZXRlXCIpO1xuICBjcmVhdGVMaXN0LnJlbW92ZUl0ZW1Gcm9tTGlzdChpdGVtKTtcbiAgY29uc3Qgb2JqQ2hlY2tMaXN0ID0gaXRlbS5jaGVja0xpc3Q7XG4gIG9iakNoZWNrTGlzdFtsaS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSArIFwiU3RhdHVzXCJdID0gdHJ1ZTtcbiAgY3JlYXRlTGlzdC51cGRhdGVJdGVtTGlzdChudWxsLCBcImFkZFwiLCBpdGVtKTtcbiAgY3JlYXRlUHJvamVjdC5lZGl0SXRlbUluUHJvamVjdChpdGVtKTtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbS5pdGVtSUQpO1xuICBjb25zdCBkaXZjaGVja2xpc3QgPSBkaXYucXVlcnlTZWxlY3RvcihcIi5pdGVtQ2hlY2tMaXN0XCIpO1xuICBjb25zdCBwID0gZGl2Y2hlY2tsaXN0LnF1ZXJ5U2VsZWN0b3IoXCJwXCIpO1xuICBjb25zdCB0YXNrcyA9IGNvdW50VGFza3MoaXRlbSk7XG4gIHAuaW5uZXJIVE1MID1cbiAgICAnPGkgY2xhc3M9XCJsYXMgbGEtdGFza3NcIj48L2k+IFRhc2tzICgnICsgdGFza3NbMF0gKyBcIi9cIiArIHRhc2tzWzFdICsgXCIpXCI7XG59XG5cbi8vIGlmIGEgdGFzayBpZiBtYXJrZWQgYXMgZmluaXNoZWQsIG1hcmsgZXZlcnkgc3VidGFzayBvbiBjaGVja2xpc3QgYXMgY29tcGxldGUgdG9vXG5mdW5jdGlvbiBtYXJrQWxsVGFza3NDb21wbGV0ZShpdGVtKSB7XG4gIGNvbnN0IG9iakNoZWNrTGlzdCA9IGl0ZW0uY2hlY2tMaXN0O1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmpDaGVja0xpc3QpKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgb2JqQ2hlY2tMaXN0W2tleV0gPSB0cnVlO1xuICAgICAgY29uc3QgbGlJZCA9IGtleS5yZXBsYWNlKFwiU3RhdHVzXCIsIFwiXCIpO1xuICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsaUlkKTtcbiAgICAgIGxpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGFza0NvbXBsZXRlXCIpO1xuICAgIH1cbiAgfVxuICBjb25zdCBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtLml0ZW1JRCk7XG4gIGNvbnN0IGRpdmNoZWNrbGlzdCA9IGRpdi5xdWVyeVNlbGVjdG9yKFwiLml0ZW1DaGVja0xpc3RcIik7XG4gIGNvbnN0IHAgPSBkaXZjaGVja2xpc3QucXVlcnlTZWxlY3RvcihcInBcIik7XG4gIGNvbnN0IHRhc2tzID0gY291bnRUYXNrcyhpdGVtKTtcbiAgcC5pbm5lckhUTUwgPVxuICAgICc8aSBjbGFzcz1cImxhcyBsYS10YXNrc1wiPjwvaT4gVGFza3MgKCcgKyB0YXNrc1swXSArIFwiL1wiICsgdGFza3NbMV0gKyBcIilcIjtcbiAgcmV0dXJuIGl0ZW07XG59XG5cbi8vIGZvciBjb2xsYXBzaW5nIGFuZCBleHBhbmRpbmcgdGFza1xuZnVuY3Rpb24gc2hvd09ySGlkZURpdnMoaXRlbSwgc2hvd29yaGlkZSkge1xuICBjb25zdCBpdGVtZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbS5pdGVtSUQpO1xuICBjb25zdCBkZXNjcmlwdGlvbiA9IGl0ZW1kaXYucXVlcnlTZWxlY3RvcihcIi5pdGVtRGVzY3JpcHRpb25cIik7XG4gIGNvbnN0IHN0YXR1cyA9IGl0ZW1kaXYucXVlcnlTZWxlY3RvcihcIi5pdGVtU3RhdHVzXCIpO1xuICBjb25zdCBub3RlcyA9IGl0ZW1kaXYucXVlcnlTZWxlY3RvcihcIi5pdGVtTm90ZXNcIik7XG4gIGNvbnN0IHVybCA9IGl0ZW1kaXYucXVlcnlTZWxlY3RvcihcIi5pdGVtVXJsXCIpO1xuICBjb25zdCBjaGVja0xpc3QgPSBpdGVtZGl2LnF1ZXJ5U2VsZWN0b3IoXCIuaXRlbUNoZWNrTGlzdFwiKTtcbiAgY29uc3QgZXhwYW5kID0gaXRlbWRpdi5xdWVyeVNlbGVjdG9yKFwiLml0ZW1FeHBhbmRcIik7XG4gIGlmIChzaG93b3JoaWRlID09PSBcImhpZGVcIikge1xuICAgIGlmIChpdGVtZGl2LmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikpIHtcbiAgICAgIGl0ZW1kaXYuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XG4gICAgfVxuICAgIGl0ZW1kaXYuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICBkZXNjcmlwdGlvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgc3RhdHVzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBub3Rlcy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgdXJsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBjaGVja0xpc3Quc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIGV4cGFuZC5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJsYXMgbGEtYW5nbGUtZG91YmxlLWRvd25cIj48L2k+JztcbiAgfSBlbHNlIHtcbiAgICBpZiAoaXRlbWRpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpIHtcbiAgICAgIGl0ZW1kaXYuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICB9XG4gICAgaXRlbWRpdi5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKTtcbiAgICBkZXNjcmlwdGlvbi5zdHlsZS5kaXNwbGF5ID0gXCJjb250ZW50c1wiO1xuICAgIHN0YXR1cy5zdHlsZS5kaXNwbGF5ID0gXCJjb250ZW50c1wiO1xuICAgIG5vdGVzLnN0eWxlLmRpc3BsYXkgPSBcImNvbnRlbnRzXCI7XG4gICAgdXJsLnN0eWxlLmRpc3BsYXkgPSBcImNvbnRlbnRzXCI7XG4gICAgY2hlY2tMaXN0LnN0eWxlLmRpc3BsYXkgPSBcImNvbnRlbnRzXCI7XG4gICAgZXhwYW5kLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImxhcyBsYS1hbmdsZS1kb3VibGUtdXBcIj48L2k+JztcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgbWFuYWdlRG9tLFxuICBhZGRJdGVtVG9Eb20sXG4gIHN0eWxlSXRlbSxcbiAgc2hvd09ySGlkZURpdnMsXG59IGZyb20gXCIuL2RvbXRoaW5ncy5qc1wiO1xuaW1wb3J0IHsgY2hlY2tJbmZvRnJvbVN0b3JhZ2UgfSBmcm9tIFwiLi9pbmZvLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVMaXN0IH0gZnJvbSBcIi4vY3JlYXRlVG9Eby5qc1wiO1xuaW1wb3J0IHsgY29tcGFyZUFzYywgcGFyc2VJU08gfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5leHBvcnQgeyBvcmRlclRhc2tzUCwgb3JkZXJUYXNrc0QgfTtcblxuLy8gbWFuYWdlRG9tIHNldHMgdXAgZWl0aGVyIGFuIGVtcHR5IHRvZG8gbGlzdCBvciBnZXRzIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZSBhbmQgc2V0cyB1cCB0aGUgcGFnZVxubWFuYWdlRG9tKCk7XG4vLyBsb29rcyBmb3IgdGhlIGhpZ2hlc3QgcHJpb3JpdHkgdGFzayBhbmQgdGhlIHRhc2sgd2l0aCB0aGUgY2xvc2VzdCBkdWUgZGF0ZSBhbmQgZGlzcGxheXMgdGhlbSBpbiBhIHNpbXBsaWZpZWQgdmVyc2lvblxuY2hlY2tJbmZvRnJvbVN0b3JhZ2UoKTtcblxuLy8gc29ydHMgdGFza3MgYnkgY2xvc2VzdCBkdWUgZGF0ZSBwZXIgcHJvamVjdFxuZnVuY3Rpb24gb3JkZXJUYXNrc0QocHJvamVjdERpdklkKSB7XG4gIGNvbnN0IHByb2plY3REaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcm9qZWN0RGl2SWQpO1xuICBjb25zdCBpdGVtZGl2cyA9IHByb2plY3REaXYucXVlcnlTZWxlY3RvckFsbChcIi5pdGVtRGl2XCIpO1xuICBjb25zdCBjb21wbGV0ZUxpc3RUYXNrcyA9IGNyZWF0ZUxpc3QudXBkYXRlSXRlbUxpc3QobnVsbCwgbnVsbCwgbnVsbCk7XG4gIC8vc3RvcmVzIHRhc2tzIHRoYXQgYmVsb25nIHRvIHRoZSBzYW1lIHByb2plY3QgaW4gYW4gYXJyYXlcbiAgbGV0IHRhc2tJblByb2plY3QgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wbGV0ZUxpc3RUYXNrcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRhc2sgPSBjb21wbGV0ZUxpc3RUYXNrc1tpXTtcbiAgICBpZiAodGFzay5wcm9qZWN0ID09PSBwcm9qZWN0RGl2SWQpIHtcbiAgICAgIHRhc2tJblByb2plY3QucHVzaCh0YXNrKTtcbiAgICB9XG4gIH1cbiAgLy8gc29ydHMgdGhlIGFycmF5IGJ5IGNvbXBhcmluZyBkYXRlcyBpbiBhc2NlbmRpbmcgb3JkZXIgKGNsb3Nlc3QgZHVlIGRhdGUgZmlyc3QpXG4gIHRhc2tJblByb2plY3Quc29ydChjb21wYXJlRGF0ZSk7XG4gIC8vIHJlbW92ZXMgdGhlIHRhc2tzIGZyb20gdGhlIGRvbSBvZiB0aGUgcHJvamVjdCBhbmQgcGxhY2VzIHRoZW0gYWdhaW4gdXNpbmcgdGhlIG5ldyBvcmRlclxuICBpdGVtZGl2cy5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLnJlbW92ZSgpKTtcbiAgdGFza0luUHJvamVjdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgYWRkSXRlbVRvRG9tKGl0ZW0sIHByb2plY3REaXYsIHByb2plY3REaXZJZCk7XG4gICAgLy8gY29sbGFwc2VzIGVhY2ggdGFza1xuICAgIHNob3dPckhpZGVEaXZzKGl0ZW0sIFwiaGlkZVwiKTtcbiAgICAvLyBpZiB0aGUgdGFzayBpZiBjb21wbGV0ZSwgc3R5bGVzIGl0IGFwcHJvcHJpYXRlbHlcbiAgICBpZiAoaXRlbS5kb25lKSB7XG4gICAgICBzdHlsZUl0ZW0oaXRlbSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZURhdGUoYSwgYikge1xuICBpZiAoYS5kb25lKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgaWYgKGIuZG9uZSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBjb25zdCBjb21wYXJlID0gY29tcGFyZUFzYyhwYXJzZUlTTyhhLmR1ZURhdGUpLCBwYXJzZUlTTyhiLmR1ZURhdGUpKTtcbiAgcmV0dXJuIGNvbXBhcmU7XG59XG5cbi8vIHNhbWUgdGhpbmcgYXMgb3JkZXJpbmcgd2l0aCBkdWUgZGF0ZSwgYnV0IG5vdyBjb21wYXJlcyBwcmlvcml0eVxuZnVuY3Rpb24gb3JkZXJUYXNrc1AocHJvamVjdERpdklkKSB7XG4gIGNvbnN0IHByb2plY3REaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcm9qZWN0RGl2SWQpO1xuICBjb25zdCBpdGVtZGl2cyA9IHByb2plY3REaXYucXVlcnlTZWxlY3RvckFsbChcIi5pdGVtRGl2XCIpO1xuICBjb25zdCBjb21wbGV0ZUxpc3RUYXNrcyA9IGNyZWF0ZUxpc3QudXBkYXRlSXRlbUxpc3QobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGxldCB0YXNrSW5Qcm9qZWN0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcGxldGVMaXN0VGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0YXNrID0gY29tcGxldGVMaXN0VGFza3NbaV07XG4gICAgaWYgKHRhc2sucHJvamVjdCA9PT0gcHJvamVjdERpdklkKSB7XG4gICAgICB0YXNrSW5Qcm9qZWN0LnB1c2godGFzayk7XG4gICAgfVxuICB9XG4gIHRhc2tJblByb2plY3Quc29ydChjb21wYXJlUHJpb3JpdHkpO1xuICBpdGVtZGl2cy5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLnJlbW92ZSgpKTtcbiAgdGFza0luUHJvamVjdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgYWRkSXRlbVRvRG9tKGl0ZW0sIHByb2plY3REaXYsIHByb2plY3REaXZJZCk7XG4gICAgc2hvd09ySGlkZURpdnMoaXRlbSwgXCJoaWRlXCIpO1xuICAgIGlmIChpdGVtLmRvbmUpIHtcbiAgICAgIHN0eWxlSXRlbShpdGVtKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gY29tcGFyZVByaW9yaXR5KGEsIGIpIHtcbiAgaWYgKGEuZG9uZSkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmIChiLmRvbmUpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIE51bWJlcihiLnByaW9yaXR5KSAtIE51bWJlcihhLnByaW9yaXR5KTtcbn1cblxuY29uc3QgZm9vdGVyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImZvb3RlclwiKTtcbmNvbnN0IHBhcmEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbnBhcmEuaW5uZXJIVE1MID1cbiAgJzxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vcGFwb3NlY28vXCIgYWx0PVwiZ2l0aHViXCI+PHNwYW4+PGkgY2xhc3M9XCJsYWIgbGEtZ2l0aHViXCI+PC9pPjwvc3Bhbj5GYWJpPC9hPic7XG5mb290ZXJEaXYuYXBwZW5kQ2hpbGQocGFyYSk7XG4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=